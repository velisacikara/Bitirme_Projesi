/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "DS18B20.h"
#include "bh1750.h"
#include "BMP180.h"
#include "dht22.h"
#include "EC.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/************ BİTKİLERİN OPTİMUM KO�?ULLARI ***************/

#define MARUL_PH_MIN 				 (float)(6.0)
#define MARUL_PH_MAX 				 (float)(7.0)
#define MARUL_EC_MIN 				 (float)(0.8)
#define MARUL_EC_MAX 				 (float)(1.5)
#define MARUL_ORTAM_SICAKLIK_MIN 	 (float)(2.0)
#define MARUL_ORTAM_SICAKLIK_MAX 	 (float)(4.5)
#define MARUL_ORTAM_NEM_MIN 		 (float)(4.5)
#define MARUL_ORTAM_NEM_MAX 	     (float)(4.5)

#define DOMATES_PH_MIN 				 (float)(5.5)
#define DOMATES_PH_MAX 				 (float)(7.0)
#define DOMATES_EC_MIN 				 (float)(1.5)
#define DOMATES_EC_MAX 				 (float)(3.0)
#define DOMATES_ORTAM_SICAKLIK_MIN 	 (float)(10.0)
#define DOMATES_ORTAM_SICAKLIK_MAX 	 (float)(30.0)
#define DOMATES_ORTAM_NEM_MIN 		 (float)(60.0)
#define DOMATES_ORTAM_NEM_MAX 		 (float)(70.0)

#define BIBER_PH_MIN 				 (float)(6.0)
#define BIBER_PH_MAX 				 (float)(6.5)
#define BIBER_EC_MIN 				 (float)(1.8)
#define BIBER_EC_MAX 				 (float)(2.2)
#define BIBER_ORTAM_SICAKLIK_MIN 	 (float)(15.0)
#define BIBER_ORTAM_SICAKLIK_MAX 	 (float)(35.0)
#define BIBER_ORTAM_NEM_MIN 		 (float)(55.0)
#define BIBER_ORTAM_NEM_MAX 		 (float)(75.0)

#define CILEK_PH_MIN 				 (float)(5.5)
#define CILEK_PH_MAX 				 (float)(6.5)
#define CILEK_EC_MIN 				 (float)(1.0)
#define CILEK_EC_MAX 				 (float)(2.0)
#define CILEK_ORTAM_SICAKLIK_MIN 	 (float)(10.0)
#define CILEK_ORTAM_SICAKLIK_MAX 	 (float)(28.0)
#define CILEK_ORTAM_NEM_MIN 		 (float)(60.0)
#define CILEK_ORTAM_NEM_MAX 		 (float)(80.0)


#define SALATALIK_PH_MIN 		     (float)(5.8)
#define SALATALIK_PH_MAX 			 (float)(6.5)
#define SALATALIK_EC_MIN 			 (float)(1.2)
#define SALATALIK_EC_MAX 			 (float)(2.5)
#define SALATALIK_ORTAM_SICAKLIK_MIN (float)(15.0)
#define SALATALIK_ORTAM_SICAKLIK_MAX (float)(28.0)
#define SALATALIK_ORTAM_NEM_MIN 	 (float)(55.0)
#define SALATALIK_ORTAM_NEM_MAX 	 (float)(80.0)


#define SU_SEVIYE_MAX				 (float)(2000)



/*******************************************************/

#define LED_16_SAAT  				(uint32_t)(30000) //57600000
#define LED_24_SAAT 				(uint32_t)(60000) // 86400000

#define MOTOR_45_DK					(uint32_t)(30000) // 2700000
#define MOTOR_2_DK					(uint32_t)(1200) // 12000
#define MOTOR_60_DK					(uint32_t)(90000) //3600000

#define FAN_1_DK					(uint32_t)(60000)
#define ISITICI_FAN_1DK				(uint32_t)(60000)

#define RESET_5_SN					(uint32_t)(5000)

#define MAX_ISIK_SIDDETI 			(uint32_t)(7000)


GPIO_PinState Led_Pin_Durum   = GPIO_PIN_SET;
GPIO_PinState Motor_Pin_Durum = GPIO_PIN_SET;


typedef enum
{
	MARUL 		= 1,
	CILEK 		= 2,
	DOMATES 	= 3,
	BIBER 		= 4,
	SALATALIK 	= 5
}Bitki_Cesitleri_t;

typedef struct
{
	float PH_MIN 			  ;
	float PH_MAX 			  ;
	float EC_MIN 			  ;
	float EC_MAX 			  ;
	float ORTAM_SICAKLIK_MIN  ;
	float ORTAM_SICAKLIK_MAX  ;
	float ORTAM_NEM_MIN 	  ;
	float ORTAM_NEM_MAX 	  ;
}Bitki_Parametreleri_t;

Bitki_Parametreleri_t Marul;
Bitki_Parametreleri_t Cilek;
Bitki_Parametreleri_t Domates;
Bitki_Parametreleri_t Biber;
Bitki_Parametreleri_t Salatalik;

typedef struct
{
	float Ortam_Nem			;
	float Ortam_Sicaklik	;
	float Isik_Siddeti_1	;
	float Isik_Siddeti_2	;
	float Su_Sicaklik		;
	float Su_Seviye			;
	float pH				;
	float EC				;
}Bitki_Anlik_Veriler_t;

Bitki_Anlik_Veriler_t Bitki_Anlik_Veriler;

typedef struct
{
	float Ortam_Nem			;
	float Ortam_Sicaklik	;
	float Isik_Siddeti_1	;
	float Isik_Siddeti_2	;
	float Su_Sicaklik		;
	float Su_Seviye			;
	float pH				;
	float EC				;
}Bitki_Canli_Izle_t;

Bitki_Canli_Izle_t test_values;

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

uint8_t Bitki_Turu;

uint8_t gonderilecek_buffer[24];

float  DHT22_Ortam_Sicaklik;

const float pH_katsayi_m = 1.6591;
const float pH_katsayi_b = 4.2307;

uint8_t ornek = 0;
uint32_t systicktimer_led   = 0;
uint32_t systicktimer_motor = 0;
uint32_t systictimer_isitici_fan = 0;
uint32_t systicktimer_fan = 0;
uint32_t systicktimer_reset = 0;


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2C2_Init(void);
static void MX_I2C3_Init(void);
static void MX_TIM6_Init(void);
static void MX_ADC2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC3_Init(void);
/* USER CODE BEGIN PFP */

void Sistem_Init(void);
float Su_Seviye_Degeri_Okuma(void);
float PH_Deger_Okuma(void);
void Parse(void);
void Kontrol(void);
void Role_Kontrol(Bitki_Parametreleri_t* Bitki);
void Motor_Kontrol(void);
void Led_Kontrol(void);
void Anlik_Verileri_Sifirla();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//float lux1,lux2,sic,sivi_seviye,su_sic,nemm,pH,ec;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_I2C2_Init();
  MX_I2C3_Init();
  MX_TIM6_Init();
  MX_ADC2_Init();
  MX_USART2_UART_Init();
  MX_ADC3_Init();
  /* USER CODE BEGIN 2 */

  Sistem_Init();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2, &Bitki_Turu, 1, 100);

	  for(ornek = 0; ornek < 10; ornek++)
	  {
		 Bitki_Anlik_Veriler.Ortam_Nem += DHT22_Get_Humidity();

		 Bitki_Anlik_Veriler.Ortam_Sicaklik += BMP180_Sicaklik_Okuma();

		 Bitki_Anlik_Veriler.Isik_Siddeti_1 += BH1750_ReadLight(&hi2c1);
		 Bitki_Anlik_Veriler.Isik_Siddeti_2 += BH1750_ReadLight(&hi2c2);

		 Bitki_Anlik_Veriler.Su_Sicaklik += DS18B20_ReadValue();

		 Bitki_Anlik_Veriler.Su_Seviye += Su_Seviye_Degeri_Okuma();

		 Bitki_Anlik_Veriler.pH += PH_Deger_Okuma();

		 Bitki_Anlik_Veriler.EC += EC_Get_Value();
	  }

	  Bitki_Anlik_Veriler.Ortam_Nem = Bitki_Anlik_Veriler.Ortam_Nem / 10;

	  Bitki_Anlik_Veriler.Ortam_Sicaklik = Bitki_Anlik_Veriler.Ortam_Sicaklik / 10;

	  Bitki_Anlik_Veriler.Isik_Siddeti_1 = Bitki_Anlik_Veriler.Isik_Siddeti_1 / 10;
	  Bitki_Anlik_Veriler.Isik_Siddeti_2 = Bitki_Anlik_Veriler.Isik_Siddeti_2 / 10;

	  Bitki_Anlik_Veriler.Su_Sicaklik = Bitki_Anlik_Veriler.Su_Sicaklik / 10;

	  Bitki_Anlik_Veriler.Su_Seviye = Bitki_Anlik_Veriler.Su_Seviye / 10;

	  Bitki_Anlik_Veriler.pH = Bitki_Anlik_Veriler.pH / 10;

	  Bitki_Anlik_Veriler.EC = Bitki_Anlik_Veriler.EC / 10;

//	  test_values.Ortam_Nem = Bitki_Anlik_Veriler.Ortam_Nem;
//	  test_values.Ortam_Sicaklik = Bitki_Anlik_Veriler.Ortam_Sicaklik;
//	  test_values.Isik_Siddeti_1 = Bitki_Anlik_Veriler.Isik_Siddeti_1;
//	  test_values.Isik_Siddeti_2 = Bitki_Anlik_Veriler.Isik_Siddeti_2;
//	  test_values.Su_Sicaklik = Bitki_Anlik_Veriler.Su_Sicaklik;
//	  test_values.Su_Seviye = Bitki_Anlik_Veriler.Su_Seviye;
//	  test_values.pH = Bitki_Anlik_Veriler.pH;
//	  test_values.EC = Bitki_Anlik_Veriler.EC;

	  Parse();

	  HAL_UART_Transmit(&huart2, gonderilecek_buffer, sizeof(gonderilecek_buffer), 10);

	  Led_Kontrol();
	  Motor_Kontrol();

	  Anlik_Verileri_Sifirla();
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 100000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 50-1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 0xffff-1;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_SENSOR_GPIO_Port, DS18B20_SENSOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DHT22_Pin|FAN_2_ROLE_Pin|FAN_1_ROLE_Pin|LED_2_ROLE_Pin
                          |LED_1_ROLE_Pin|PH_DUSURUCU_ROLE_Pin|PH_ARTIRICI_ROLE_Pin|EC_ROLE_Pin
                          |SU_ROLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISITI_ROLE_GPIO_Port, ISITI_ROLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_TAHLIYE_ROLE_Pin|MOTOR_ROLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DS18B20_SENSOR_Pin */
  GPIO_InitStruct.Pin = DS18B20_SENSOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DS18B20_SENSOR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ISITI_ROLE_Pin */
  GPIO_InitStruct.Pin = ISITI_ROLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ISITI_ROLE_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : FAN_2_ROLE_Pin FAN_1_ROLE_Pin LED_2_ROLE_Pin LED_1_ROLE_Pin
                           PH_DUSURUCU_ROLE_Pin PH_ARTIRICI_ROLE_Pin EC_ROLE_Pin SU_ROLE_Pin */
  GPIO_InitStruct.Pin = FAN_2_ROLE_Pin|FAN_1_ROLE_Pin|LED_2_ROLE_Pin|LED_1_ROLE_Pin
                          |PH_DUSURUCU_ROLE_Pin|PH_ARTIRICI_ROLE_Pin|EC_ROLE_Pin|SU_ROLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : RESET_TAHLIYE_ROLE_Pin MOTOR_ROLE_Pin */
  GPIO_InitStruct.Pin = RESET_TAHLIYE_ROLE_Pin|MOTOR_ROLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/**
  * @brief  Sistemin İlk Ayarlarını Yapar.
  *
  * @param  void
  *
  * @retval void
  */

void Sistem_Init(void)
{
	/* MARUL */
	Marul.PH_MIN 				    = MARUL_PH_MIN;
	Marul.PH_MAX 				    = MARUL_PH_MAX;
	Marul.EC_MIN 				    = MARUL_EC_MIN;
	Marul.EC_MAX 				    = MARUL_EC_MAX;
	Marul.ORTAM_SICAKLIK_MIN 	    = MARUL_ORTAM_SICAKLIK_MIN;
	Marul.ORTAM_SICAKLIK_MAX 	    = MARUL_ORTAM_SICAKLIK_MAX;
	Marul.ORTAM_NEM_MIN 		    = MARUL_ORTAM_NEM_MIN;
	Marul.ORTAM_NEM_MAX 		    = MARUL_ORTAM_NEM_MAX;

	/* CILEK */
	Cilek.PH_MIN 				    = CILEK_PH_MIN;
	Cilek.PH_MAX 				    = CILEK_PH_MAX;
	Cilek.EC_MIN 				    = CILEK_EC_MIN;
	Cilek.EC_MAX 				    = CILEK_EC_MAX;
	Cilek.ORTAM_SICAKLIK_MIN 	    = CILEK_ORTAM_SICAKLIK_MIN;
	Cilek.ORTAM_SICAKLIK_MAX 	    = CILEK_ORTAM_SICAKLIK_MAX;
	Cilek.ORTAM_NEM_MIN 		    = CILEK_ORTAM_NEM_MIN;
	Cilek.ORTAM_NEM_MAX 		    = CILEK_ORTAM_NEM_MAX;

	/* DOMATES */
	Domates.PH_MIN 					= DOMATES_PH_MIN;
	Domates.PH_MAX 					= DOMATES_PH_MAX;
	Domates.EC_MIN 					= DOMATES_EC_MIN;
	Domates.EC_MAX 					= DOMATES_EC_MAX;
	Domates.ORTAM_SICAKLIK_MIN 		= DOMATES_ORTAM_SICAKLIK_MIN;
	Domates.ORTAM_SICAKLIK_MAX 		= DOMATES_ORTAM_SICAKLIK_MAX;
	Domates.ORTAM_NEM_MIN 			= DOMATES_ORTAM_NEM_MIN;
	Domates.ORTAM_NEM_MAX 			= DOMATES_ORTAM_NEM_MAX;

	/* BIBER */
	Biber.PH_MIN 				    = BIBER_PH_MIN;
	Biber.PH_MAX 				    = BIBER_PH_MAX;
	Biber.EC_MIN 				    = BIBER_EC_MIN;
	Biber.EC_MAX 				    = BIBER_EC_MAX;
	Biber.ORTAM_SICAKLIK_MIN 	    = BIBER_ORTAM_SICAKLIK_MIN;
	Biber.ORTAM_SICAKLIK_MAX 	    = BIBER_ORTAM_SICAKLIK_MAX;
	Biber.ORTAM_NEM_MIN 		    = BIBER_ORTAM_NEM_MIN;
	Biber.ORTAM_NEM_MAX 		    = BIBER_ORTAM_NEM_MAX;

	/* SALATALIK */
	Salatalik.PH_MIN 				= SALATALIK_PH_MIN;
	Salatalik.PH_MAX 				= SALATALIK_PH_MAX;
	Salatalik.EC_MIN 				= SALATALIK_EC_MIN;
	Salatalik.EC_MAX 				= SALATALIK_EC_MAX;
	Salatalik.ORTAM_SICAKLIK_MIN 	= SALATALIK_ORTAM_SICAKLIK_MIN;
	Salatalik.ORTAM_SICAKLIK_MAX 	= SALATALIK_ORTAM_SICAKLIK_MAX;
	Salatalik.ORTAM_NEM_MIN 		= SALATALIK_ORTAM_NEM_MIN;
	Salatalik.ORTAM_NEM_MAX 		= SALATALIK_ORTAM_NEM_MAX;

	BH1750_Init(&hi2c1);
	BH1750_SetMode(&hi2c1, CONTINUOUS_HIGH_RES_MODE_2);
	BH1750_Init(&hi2c2);
	BH1750_SetMode(&hi2c2, CONTINUOUS_HIGH_RES_MODE_2);
	BMP180_Init();
	DHT22_Init();

	HAL_TIM_Base_Start(&htim6);
	HAL_Delay(2000);

	SysTick_Config(SystemCoreClock / 1000); 						   // Systicktimer 1ms ayarlandı.

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_3, Led_Pin_Durum);  // LED ilk durum için açıldı
}

/**
  * @brief  Su Seviye Sensöründen Veri Okur.
  *
  * @param  void
  *
  * @retval Su Seviye Değeri
  */

float Su_Seviye_Degeri_Okuma()
{
	float temp_seviye_Degeri = 0;

	HAL_ADC_Start(&hadc1);

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
	{
		temp_seviye_Degeri = HAL_ADC_GetValue(&hadc1);
	}
	HAL_ADC_Stop(&hadc1);

	return temp_seviye_Degeri;
}

/**
  * @brief  pH Sensöründen Veri Okur.
  *
  * @param  void
  *
  * @retval pH Değeri
  */

float PH_Deger_Okuma()
{
	uint16_t PH_adc = 0;
	float temp = 0;
	HAL_ADC_Start(&hadc3);

	if(HAL_ADC_PollForConversion(&hadc3, 100000) == HAL_OK)
	{
		PH_adc = HAL_ADC_GetValue(&hadc3);
		temp = (pH_katsayi_m * (PH_adc * (5.0 / 4095.0) ) + pH_katsayi_b);
	}
	HAL_ADC_Stop(&hadc3);

	return temp;
}

/**
  * @brief  Okunan Sensör Verilerini ESP32'ye Gönderebilmek İçin
  * 		Parse İşlemine Tabi Tutar.
  *
  * @param  void
  *
  * @retval void
  */

void Parse(void)
{
	/* DHT22 */
	gonderilecek_buffer[0] = (uint8_t) Bitki_Anlik_Veriler.Ortam_Nem;
	gonderilecek_buffer[1] = (uint8_t)((Bitki_Anlik_Veriler.Ortam_Nem - (float)gonderilecek_buffer[0]) * 100);

	/* BMP180 */
	gonderilecek_buffer[2] = (uint8_t) Bitki_Anlik_Veriler.Ortam_Sicaklik;
	gonderilecek_buffer[3] = (uint8_t)((Bitki_Anlik_Veriler.Ortam_Sicaklik - (float)gonderilecek_buffer[2]) * 100);

	/* BH1750  1 */
	gonderilecek_buffer[4] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 / 10000          );
	gonderilecek_buffer[5] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 10000) / 1000 );
	gonderilecek_buffer[6] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 1000) / 100   );
	gonderilecek_buffer[7] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 100) / 10     );
	gonderilecek_buffer[8] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 10             );


	/* BH1750  2 */
	gonderilecek_buffer[9]  = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 / 10000          );
	gonderilecek_buffer[10] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 10000) / 1000 );
	gonderilecek_buffer[11] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 1000) / 100   );
	gonderilecek_buffer[12] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 100) / 10     );
	gonderilecek_buffer[13] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 10             );


	/* DS18B20 */
	gonderilecek_buffer[14] = (uint8_t) Bitki_Anlik_Veriler.Su_Sicaklik;
	gonderilecek_buffer[15] = (uint8_t)((Bitki_Anlik_Veriler.Su_Sicaklik - (float)gonderilecek_buffer[14]) * 100);

	/* SU SEVİYE */
	gonderilecek_buffer[16] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Su_Seviye / 1000         );
	gonderilecek_buffer[17] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 1000) / 100 );
	gonderilecek_buffer[18] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 100) / 10   );
	gonderilecek_buffer[19] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 10)         );

	/* PH */
	gonderilecek_buffer[20] = (uint8_t) Bitki_Anlik_Veriler.pH;
	gonderilecek_buffer[21] = (uint8_t)((Bitki_Anlik_Veriler.pH - (float)gonderilecek_buffer[20]) * 100);

	/* EC */
	gonderilecek_buffer[22] = (uint8_t) Bitki_Anlik_Veriler.EC;
	gonderilecek_buffer[23] = (uint8_t)((Bitki_Anlik_Veriler.EC - (float)gonderilecek_buffer[22]) * 100);

}

/**
  * @brief  Seçilen Bitki Türüne Göre Çözelti Değerlerini
  * 		Ayarlamak İçin Role_Kontrol Fonksiyonu Çağrılır.
  *
  * @param  void
  *
  * @retval void
  */

void Kontrol(void)
{
	  switch(Bitki_Turu)
	  {
	  case MARUL:
		  Role_Kontrol(&Marul);
		  break;
	  case CILEK:
		  Role_Kontrol(&Cilek);
		  break;
	  case DOMATES:
		  Role_Kontrol(&Domates);
		  break;
	  case BIBER:
		  Role_Kontrol(&Biber);
		  break;
	  case SALATALIK:
		  Role_Kontrol(&Salatalik);
		  break;
	  default:
		  Role_Kontrol(&Marul);
		  break;
	  }
}

/**
  * @brief  Gönderilen Bitki Çeşidinin Türüne Göre Gerekli Optimum
  * 		Koşulları Sağlamak İçin İlgili Motorlar Açılıp Kapanır.
  *
  * @param  *Bitki Bitki Çeşidi
  *
  * @retval void
  */

void Role_Kontrol(Bitki_Parametreleri_t* Bitki)
{
	  if(Bitki_Anlik_Veriler.pH < Bitki->PH_MIN)
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); 					// pH Artırıcı Aç
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET); 				// pH Artırıcı Kapat
	  }
	  else if(Bitki_Anlik_Veriler.pH > Bitki->PH_MAX)
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); 					// pH Düşürücü Aç
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); 				// pH Düşürücü Kapat
	  }
	  if(Bitki_Anlik_Veriler.EC < Bitki->EC_MIN)
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET); 					// EC Aç
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET); 				// EC Kapat
	  }
	  else if(Bitki_Anlik_Veriler.EC > Bitki->EC_MAX)
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET); 					// Su Aç
		  HAL_Delay(1000);
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET); 				// Su Kapat
	  }
	  if(Bitki_Anlik_Veriler.Ortam_Sicaklik < Bitki->ORTAM_SICAKLIK_MIN)
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); 					// Isıtıcı Fan Aç
		  systictimer_isitici_fan = 0;

	  }
	  else if(Bitki_Anlik_Veriler.Ortam_Sicaklik > Bitki->ORTAM_SICAKLIK_MAX)
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET); 	    // Fan1 Fan2 Aç
		  systicktimer_fan = 0;
	  }

	  if(Bitki_Anlik_Veriler.Su_Seviye > SU_SEVIYE_MAX)
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); 				    // Reset Aç
		  systicktimer_reset = 0;
	  }

	  if(systictimer_isitici_fan > ISITICI_FAN_1DK )
	 	  {
	 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); 				// Isıtıcı Fan Kapat
	 	  }
	 	  if(systicktimer_fan > FAN_1_DK )
	 	  {
	 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 |GPIO_PIN_1, GPIO_PIN_RESET);     // Fan1 Fan2 Kapat
	 	  }
	 	  if(systicktimer_reset > RESET_5_SN)
	 	  {
	 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET); 			    // Reset Kapat
	 	  }


}

/**
  * @brief  LED'lerin Günün 16 Saati Boyunca Aktif Edilmesini
  * 		ve Geri Kalan 8 Saatini Deaktif Edilmesinin Kontrolünü Sağlar.
  *
  * @param  void
  *
  * @retval void
  */

void Led_Kontrol(void)
{
	// ÜST KATTAKİ LED I�?IK �?İDDETİ 1 OLACAK
	//Led_Pin_Durum = (Bitki_Anlik_Veriler.Isik_Siddeti_1 > MAX_ISIK_SIDDETI) ? GPIO_PIN_RESET : GPIO_PIN_SET;

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2 | GPIO_PIN_3 ,Led_Pin_Durum);

	if(systicktimer_led >= LED_16_SAAT && systicktimer_led < LED_24_SAAT)
	{
		Led_Pin_Durum = GPIO_PIN_RESET;
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2 | GPIO_PIN_3 ,Led_Pin_Durum);
	}
	else if(systicktimer_led >= LED_24_SAAT)
	{
	  systicktimer_led = 0;
	  Led_Pin_Durum = GPIO_PIN_SET;
	}
}

/**
  * @brief  Motorun Saatin 45 Dakika Boyunca Aktif Edilmesini
  * 		ve Geri Kalan 15 Saatini Deaktif Edilmesinin Kontrolünü Sağlar.
  * 		Deaktif Sırasında Çözeltinin Kontrolü Yapılmak Üzere Kontrol
  * 		Fonksiyonu Çağrılır.
  *
  * @param  void
  *
  * @retval void
  */

void Motor_Kontrol(void)
{

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,Motor_Pin_Durum);

	if(systicktimer_motor >= MOTOR_45_DK && systicktimer_motor < MOTOR_60_DK)
	{

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET);

		Motor_Pin_Durum = GPIO_PIN_RESET;
		if(systicktimer_motor >= MOTOR_45_DK + MOTOR_2_DK)
		{
			Kontrol();
		}
	}
	else if(systicktimer_motor >= MOTOR_60_DK)
	{
		systicktimer_motor = 0;
		Motor_Pin_Durum = GPIO_PIN_SET;

	 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); 				// Isıtıcı Fan Kapat
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 |GPIO_PIN_1, GPIO_PIN_RESET);     // Fan1 Fan2 Kapat
	 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET); 			    // Reset Kapat

	}
}

/**
  * @brief Bitkinin Anlık Verileri Sıfırlanır.
  *
  * @param  void
  *
  * @retval void
  */

void Anlik_Verileri_Sifirla()
{
	  Bitki_Anlik_Veriler.EC 			 = 0;
	  Bitki_Anlik_Veriler.Isik_Siddeti_1 = 0;
	  Bitki_Anlik_Veriler.Isik_Siddeti_2 = 0;
	  Bitki_Anlik_Veriler.Ortam_Nem 	 = 0;
	  Bitki_Anlik_Veriler.Ortam_Sicaklik = 0;
	  Bitki_Anlik_Veriler.Su_Seviye 	 = 0;
	  Bitki_Anlik_Veriler.Su_Sicaklik 	 = 0;
	  Bitki_Anlik_Veriler.pH 			 = 0;
}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
