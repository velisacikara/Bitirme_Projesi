
Bitirme_Projesi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e50  08006e50  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e58  08006e58  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000430  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130a9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002583  00000000  00000000  000330ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  00035670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff1  00000000  00000000  000376d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001464a  00000000  00000000  0005a6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da40b  00000000  00000000  0006ed0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047d8  00000000  00000000  00149168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006e20 	.word	0x08006e20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006e20 	.word	0x08006e20

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <BH1750_Init+0x34>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000d66:	f000 f813 	bl	8000d90 <BH1750_Reset>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000d70:	2045      	movs	r0, #69	; 0x45
 8000d72:	f000 f85d 	bl	8000e30 <BH1750_SetMtreg>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <BH1750_Init+0x28>
			return BH1750_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e000      	b.n	8000d82 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000030 	.word	0x20000030

08000d90 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000d96:	2307      	movs	r3, #7
 8000d98:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <BH1750_Reset+0x30>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	230a      	movs	r3, #10
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	2146      	movs	r1, #70	; 0x46
 8000da8:	f003 fa4e 	bl	8004248 <HAL_I2C_Master_Transmit>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <BH1750_Reset+0x26>
		return BH1750_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000030 	.word	0x20000030

08000dc4 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(I2C_HandleTypeDef *hi2c, bh1750_mode Mode)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	bh1750_i2c = hi2c;
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <BH1750_SetMode+0x64>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <BH1750_SetMode+0x2a>
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <BH1750_SetMode+0x2a>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e018      	b.n	8000e20 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <BH1750_SetMode+0x38>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e011      	b.n	8000e20 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <BH1750_SetMode+0x68>)
 8000e00:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <BH1750_SetMode+0x64>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	1cfa      	adds	r2, r7, #3
 8000e08:	230a      	movs	r3, #10
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2146      	movs	r1, #70	; 0x46
 8000e10:	f003 fa1a 	bl	8004248 <HAL_I2C_Master_Transmit>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <BH1750_SetMode+0x5a>
		return BH1750_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <BH1750_SetMode+0x5c>

	return BH1750_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000030 	.word	0x20000030
 8000e2c:	20000034 	.word	0x20000034

08000e30 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b1e      	cmp	r3, #30
 8000e3e:	d902      	bls.n	8000e46 <BH1750_SetMtreg+0x16>
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d101      	bne.n	8000e4a <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e037      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <BH1750_SetMtreg+0x94>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <BH1750_SetMtreg+0x98>)
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2146      	movs	r1, #70	; 0x46
 8000e82:	f003 f9e1 	bl	8004248 <HAL_I2C_Master_Transmit>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e012      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <BH1750_SetMtreg+0x98>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2146      	movs	r1, #70	; 0x46
 8000ea6:	f003 f9cf 	bl	8004248 <HAL_I2C_Master_Transmit>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000035 	.word	0x20000035
 8000ec8:	20000030 	.word	0x20000030

08000ecc <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
float BH1750_ReadLight(I2C_HandleTypeDef *hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <BH1750_ReadLight+0xa8>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <BH1750_ReadLight+0xa8>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	f107 0208 	add.w	r2, r7, #8
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	2146      	movs	r1, #70	; 0x46
 8000eea:	f003 faab 	bl	8004444 <HAL_I2C_Master_Receive>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d139      	bne.n	8000f68 <BH1750_ReadLight+0x9c>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8000ef4:	7a3b      	ldrb	r3, [r7, #8]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	7a7a      	ldrb	r2, [r7, #9]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f04:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <BH1750_ReadLight+0xac>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b45      	cmp	r3, #69	; 0x45
 8000f0e:	d00f      	beq.n	8000f30 <BH1750_ReadLight+0x64>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <BH1750_ReadLight+0xac>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f7c <BH1750_ReadLight+0xb0>
 8000f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <BH1750_ReadLight+0xb4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b21      	cmp	r3, #33	; 0x21
 8000f36:	d003      	beq.n	8000f40 <BH1750_ReadLight+0x74>
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <BH1750_ReadLight+0xb4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b11      	cmp	r3, #17
 8000f3e:	d107      	bne.n	8000f50 <BH1750_ReadLight+0x84>
		{
			result /= 2.0;
 8000f40:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f44:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		result = result / (float)BH1750_CONVERSION_FACTOR;
 8000f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f54:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f84 <BH1750_ReadLight+0xb8>
 8000f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5c:	edc7 7a03 	vstr	s15, [r7, #12]
		return result;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	e7ff      	b.n	8000f68 <BH1750_ReadLight+0x9c>
	}

}
 8000f68:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000030 	.word	0x20000030
 8000f78:	20000035 	.word	0x20000035
 8000f7c:	428a0000 	.word	0x428a0000
 8000f80:	20000034 	.word	0x20000034
 8000f84:	3f99999a 	.word	0x3f99999a

08000f88 <Kalibrasyon_Degeri_Okuma>:
long Temp = 0;



void Kalibrasyon_Degeri_Okuma (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa0:	23aa      	movs	r3, #170	; 0xaa
 8000fa2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa4:	8afa      	ldrh	r2, [r7, #22]
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2316      	movs	r3, #22
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	21ee      	movs	r1, #238	; 0xee
 8000fb8:	4836      	ldr	r0, [pc, #216]	; (8001094 <Kalibrasyon_Degeri_Okuma+0x10c>)
 8000fba:	f003 fd63 	bl	8004a84 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fbe:	783b      	ldrb	r3, [r7, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <Kalibrasyon_Degeri_Okuma+0x110>)
 8000fce:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd0:	78bb      	ldrb	r3, [r7, #2]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <Kalibrasyon_Degeri_Okuma+0x114>)
 8000fe0:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe2:	793b      	ldrb	r3, [r7, #4]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <Kalibrasyon_Degeri_Okuma+0x118>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <Kalibrasyon_Degeri_Okuma+0x11c>)
 8001006:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7a7b      	ldrb	r3, [r7, #9]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <Kalibrasyon_Degeri_Okuma+0x120>)
 800101a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <Kalibrasyon_Degeri_Okuma+0x124>)
 800102e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <Kalibrasyon_Degeri_Okuma+0x128>)
 8001040:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <Kalibrasyon_Degeri_Okuma+0x12c>)
 8001052:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001054:	7c3b      	ldrb	r3, [r7, #16]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7c7b      	ldrb	r3, [r7, #17]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <Kalibrasyon_Degeri_Okuma+0x130>)
 8001064:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7cfb      	ldrb	r3, [r7, #19]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <Kalibrasyon_Degeri_Okuma+0x134>)
 8001076:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001078:	7d3b      	ldrb	r3, [r7, #20]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7d7b      	ldrb	r3, [r7, #21]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <Kalibrasyon_Degeri_Okuma+0x138>)
 8001088:	801a      	strh	r2, [r3, #0]

}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000032c 	.word	0x2000032c
 8001098:	20000036 	.word	0x20000036
 800109c:	20000038 	.word	0x20000038
 80010a0:	2000003a 	.word	0x2000003a
 80010a4:	2000003c 	.word	0x2000003c
 80010a8:	2000003e 	.word	0x2000003e
 80010ac:	20000040 	.word	0x20000040
 80010b0:	20000042 	.word	0x20000042
 80010b4:	20000044 	.word	0x20000044
 80010b8:	20000046 	.word	0x20000046
 80010bc:	20000048 	.word	0x20000048
 80010c0:	2000004a 	.word	0x2000004a

080010c4 <Ham_Sicaklik_Okuma>:


uint16_t Ham_Sicaklik_Okuma (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010ca:	232e      	movs	r3, #46	; 0x2e
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010ce:	2300      	movs	r3, #0
 80010d0:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 100);
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	22f4      	movs	r2, #244	; 0xf4
 80010e2:	21ee      	movs	r1, #238	; 0xee
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <Ham_Sicaklik_Okuma+0x5c>)
 80010e6:	f003 fbd3 	bl	8004890 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // 4.5 ms bekle
 80010ea:	2005      	movs	r0, #5
 80010ec:	f002 f890 	bl	8003210 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	22f6      	movs	r2, #246	; 0xf6
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Ham_Sicaklik_Okuma+0x5c>)
 8001104:	f003 fcbe 	bl	8004a84 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000032c 	.word	0x2000032c

08001124 <BMP180_Sicaklik_Okuma>:

float BMP180_Sicaklik_Okuma (void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	af00      	add	r7, sp, #0
	UT = Ham_Sicaklik_Okuma();
 8001128:	f7ff ffcc 	bl	80010c4 <Ham_Sicaklik_Okuma>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <BMP180_Sicaklik_Okuma+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BMP180_Sicaklik_Okuma+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <BMP180_Sicaklik_Okuma+0x10c>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f994 	bl	800046c <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <BMP180_Sicaklik_Okuma+0x110>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f98d 	bl	800046c <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <BMP180_Sicaklik_Okuma+0x114>)
 8001158:	f7ff fb1c 	bl	8000794 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f9ec 	bl	8000540 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fbf8 	bl	8000964 <__aeabi_d2iz>
 8001174:	4603      	mov	r3, r0
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 8001178:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <BMP180_Sicaklik_Okuma+0x11c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f973 	bl	800046c <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_Sicaklik_Okuma+0x120>)
 800118c:	f7ff f9d8 	bl	8000540 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	461d      	mov	r5, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <BMP180_Sicaklik_Okuma+0x124>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f960 	bl	800046c <__aeabi_i2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff faee 	bl	8000794 <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fbd0 	bl	8000964 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <BMP180_Sicaklik_Okuma+0x128>)
 80011c8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <BMP180_Sicaklik_Okuma+0x128>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <BMP180_Sicaklik_Okuma+0x12c>)
 80011d6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <BMP180_Sicaklik_Okuma+0x12c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f944 	bl	800046c <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <BMP180_Sicaklik_Okuma+0x130>)
 80011ea:	f7ff fad3 	bl	8000794 <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fbb5 	bl	8000964 <__aeabi_d2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <BMP180_Sicaklik_Okuma+0x134>)
 80011fe:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BMP180_Sicaklik_Okuma+0x134>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BMP180_Sicaklik_Okuma+0x138>)
 8001210:	f7ff fac0 	bl	8000794 <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fbca 	bl	80009b4 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	2000004c 	.word	0x2000004c
 8001230:	20000040 	.word	0x20000040
 8001234:	2000003e 	.word	0x2000003e
 8001238:	40e00000 	.word	0x40e00000
 800123c:	20000050 	.word	0x20000050
 8001240:	20000048 	.word	0x20000048
 8001244:	40a00000 	.word	0x40a00000
 8001248:	2000004a 	.word	0x2000004a
 800124c:	20000054 	.word	0x20000054
 8001250:	20000058 	.word	0x20000058
 8001254:	40300000 	.word	0x40300000
 8001258:	2000005c 	.word	0x2000005c
 800125c:	40240000 	.word	0x40240000

08001260 <BMP180_Init>:


void BMP180_Init (void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	Kalibrasyon_Degeri_Okuma();
 8001264:	f7ff fe90 	bl	8000f88 <Kalibrasyon_Degeri_Okuma>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <delay>:
#include "DS18B20.h"

extern TIM_HandleTypeDef htim6;

void delay (uint32_t us)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <delay+0x2c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim6))<us);
 800127c:	bf00      	nop
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <delay+0x2c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d8f9      	bhi.n	800127e <delay+0x12>
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	20000380 	.word	0x20000380

0800129c <Set_Pin_Output>:
uint8_t Presence = 0;



void Set_Pin_Output(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012bc:	2311      	movs	r3, #17
 80012be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f002 fcaa 	bl	8003c24 <HAL_GPIO_Init>
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f002 fc8c 	bl	8003c24 <HAL_GPIO_Init>
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <DS18B20_Start>:


uint8_t DS18B20_Start (void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800131e:	2102      	movs	r1, #2
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <DS18B20_Start+0x5c>)
 8001322:	f7ff ffbb 	bl	800129c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001326:	2200      	movs	r2, #0
 8001328:	2102      	movs	r1, #2
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <DS18B20_Start+0x5c>)
 800132c:	f002 fe2e 	bl	8003f8c <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001330:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001334:	f7ff ff9a 	bl	800126c <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001338:	2102      	movs	r1, #2
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <DS18B20_Start+0x5c>)
 800133c:	f7ff ffcc 	bl	80012d8 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001340:	2050      	movs	r0, #80	; 0x50
 8001342:	f7ff ff93 	bl	800126c <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001346:	2102      	movs	r1, #2
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <DS18B20_Start+0x5c>)
 800134a:	f002 fe07 	bl	8003f5c <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <DS18B20_Start+0x46>
 8001354:	2301      	movs	r3, #1
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e001      	b.n	800135e <DS18B20_Start+0x4a>
	else Response = -1;
 800135a:	23ff      	movs	r3, #255	; 0xff
 800135c:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800135e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001362:	f7ff ff83 	bl	800126c <delay>

	return Response;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020000 	.word	0x40020000

08001374 <DS18B20_Write>:


void DS18B20_Write (uint8_t data)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800137e:	2102      	movs	r1, #2
 8001380:	481e      	ldr	r0, [pc, #120]	; (80013fc <DS18B20_Write+0x88>)
 8001382:	f7ff ff8b 	bl	800129c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e02e      	b.n	80013ea <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	fa42 f303 	asr.w	r3, r2, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800139c:	2102      	movs	r1, #2
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <DS18B20_Write+0x88>)
 80013a0:	f7ff ff7c 	bl	800129c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <DS18B20_Write+0x88>)
 80013aa:	f002 fdef 	bl	8003f8c <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff ff5c 	bl	800126c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80013b4:	2102      	movs	r1, #2
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <DS18B20_Write+0x88>)
 80013b8:	f7ff ff8e 	bl	80012d8 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f7ff ff55 	bl	800126c <delay>
 80013c2:	e00f      	b.n	80013e4 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80013c4:	2102      	movs	r1, #2
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <DS18B20_Write+0x88>)
 80013c8:	f7ff ff68 	bl	800129c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80013cc:	2200      	movs	r2, #0
 80013ce:	2102      	movs	r1, #2
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <DS18B20_Write+0x88>)
 80013d2:	f002 fddb 	bl	8003f8c <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80013d6:	2032      	movs	r0, #50	; 0x32
 80013d8:	f7ff ff48 	bl	800126c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80013dc:	2102      	movs	r1, #2
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <DS18B20_Write+0x88>)
 80013e0:	f7ff ff7a 	bl	80012d8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	ddcd      	ble.n	800138c <DS18B20_Write+0x18>
		}
	}
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40020000 	.word	0x40020000

08001400 <DS18B20_Read>:


uint8_t DS18B20_Read (void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set
 800140a:	2102      	movs	r1, #2
 800140c:	481a      	ldr	r0, [pc, #104]	; (8001478 <DS18B20_Read+0x78>)
 800140e:	f7ff ff63 	bl	80012d8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	e026      	b.n	8001466 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001418:	2102      	movs	r1, #2
 800141a:	4817      	ldr	r0, [pc, #92]	; (8001478 <DS18B20_Read+0x78>)
 800141c:	f7ff ff3e 	bl	800129c <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);  // pull the data pin LOW
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <DS18B20_Read+0x78>)
 8001426:	f002 fdb1 	bl	8003f8c <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 800142a:	2002      	movs	r0, #2
 800142c:	f7ff ff1e 	bl	800126c <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set
 8001430:	2102      	movs	r1, #2
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <DS18B20_Read+0x78>)
 8001434:	f7ff ff50 	bl	80012d8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is HIGH
 8001438:	2102      	movs	r1, #2
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <DS18B20_Read+0x78>)
 800143c:	f002 fd8e 	bl	8003f5c <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001446:	2201      	movs	r2, #1
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b25a      	sxtb	r2, r3
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4313      	orrs	r3, r2
 8001456:	b25b      	sxtb	r3, r3
 8001458:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 800145a:	203c      	movs	r0, #60	; 0x3c
 800145c:	f7ff ff06 	bl	800126c <delay>
	for (int i=0;i<8;i++)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b07      	cmp	r3, #7
 800146a:	ddd5      	ble.n	8001418 <DS18B20_Read+0x18>
	}
	return value;
 800146c:	79fb      	ldrb	r3, [r7, #7]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000

0800147c <DS18B20_ReadValue>:

float DS18B20_ReadValue()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	  Presence = DS18B20_Start ();
 8001480:	f7ff ff48 	bl	8001314 <DS18B20_Start>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <DS18B20_ReadValue+0xa0>)
 800148a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (1);
 800148c:	2001      	movs	r0, #1
 800148e:	f001 febf 	bl	8003210 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001492:	20cc      	movs	r0, #204	; 0xcc
 8001494:	f7ff ff6e 	bl	8001374 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001498:	2044      	movs	r0, #68	; 0x44
 800149a:	f7ff ff6b 	bl	8001374 <DS18B20_Write>
	  HAL_Delay (800);
 800149e:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014a2:	f001 feb5 	bl	8003210 <HAL_Delay>

	  Presence = DS18B20_Start ();
 80014a6:	f7ff ff35 	bl	8001314 <DS18B20_Start>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <DS18B20_ReadValue+0xa0>)
 80014b0:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f001 feac 	bl	8003210 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80014b8:	20cc      	movs	r0, #204	; 0xcc
 80014ba:	f7ff ff5b 	bl	8001374 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 80014be:	20be      	movs	r0, #190	; 0xbe
 80014c0:	f7ff ff58 	bl	8001374 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 80014c4:	f7ff ff9c 	bl	8001400 <DS18B20_Read>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <DS18B20_ReadValue+0xa4>)
 80014ce:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 80014d0:	f7ff ff96 	bl	8001400 <DS18B20_Read>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <DS18B20_ReadValue+0xa8>)
 80014da:	701a      	strb	r2, [r3, #0]

	  TEMP = (Temp_byte2 << 8) | Temp_byte1;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <DS18B20_ReadValue+0xa8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <DS18B20_ReadValue+0xa4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <DS18B20_ReadValue+0xac>)
 80014f2:	801a      	strh	r2, [r3, #0]
	  DS18B20_Temperature = (float) TEMP/16;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <DS18B20_ReadValue+0xac>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001500:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <DS18B20_ReadValue+0xb0>)
 800150a:	edc3 7a00 	vstr	s15, [r3]
	  return DS18B20_Temperature;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <DS18B20_ReadValue+0xb0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000068 	.word	0x20000068
 8001520:	20000060 	.word	0x20000060
 8001524:	20000061 	.word	0x20000061
 8001528:	20000062 	.word	0x20000062
 800152c:	20000064 	.word	0x20000064

08001530 <EC_Read_ADC>:

extern ADC_HandleTypeDef hadc2;


uint16_t EC_Read_ADC()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	uint16_t adc_val = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc2);
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <EC_Read_ADC+0x3c>)
 800153c:	f001 fed0 	bl	80032e0 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK)
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	4809      	ldr	r0, [pc, #36]	; (800156c <EC_Read_ADC+0x3c>)
 8001546:	f001 ffd0 	bl	80034ea <HAL_ADC_PollForConversion>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d104      	bne.n	800155a <EC_Read_ADC+0x2a>
	{
		adc_val = HAL_ADC_GetValue(&hadc2);
 8001550:	4806      	ldr	r0, [pc, #24]	; (800156c <EC_Read_ADC+0x3c>)
 8001552:	f002 f855 	bl	8003600 <HAL_ADC_GetValue>
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	}
	HAL_ADC_Stop(&hadc2);
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <EC_Read_ADC+0x3c>)
 800155c:	f001 ff92 	bl	8003484 <HAL_ADC_Stop>
	return adc_val;
 8001560:	88fb      	ldrh	r3, [r7, #6]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001f4 	.word	0x200001f4

08001570 <EC_Buffera_Topla>:


void EC_Buffera_Topla()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	for(int i = 0; i <= SCOUNT; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	e013      	b.n	80015a4 <EC_Buffera_Topla+0x34>
	{
		analogBuffer[i] = ( EC_Read_ADC() / 10);
 800157c:	f7ff ffd8 	bl	8001530 <EC_Read_ADC>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <EC_Buffera_Topla+0x44>)
 8001586:	fba3 2302 	umull	r2, r3, r3, r2
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <EC_Buffera_Topla+0x48>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		HAL_Delay(50);
 8001598:	2032      	movs	r0, #50	; 0x32
 800159a:	f001 fe39 	bl	8003210 <HAL_Delay>
	for(int i = 0; i <= SCOUNT; i++)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b1e      	cmp	r3, #30
 80015a8:	dde8      	ble.n	800157c <EC_Buffera_Topla+0xc>
	}
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	cccccccd 	.word	0xcccccccd
 80015b8:	2000006c 	.word	0x2000006c
 80015bc:	00000000 	.word	0x00000000

080015c0 <EC_Get_Median_Num>:


float EC_Get_Median_Num(uint32_t *bArray, int iFilterLen) {
 80015c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015c4:	b089      	sub	sp, #36	; 0x24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	466b      	mov	r3, sp
 80015ce:	461e      	mov	r6, r3
  uint32_t bTab[iFilterLen];
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	1e4b      	subs	r3, r1, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	460a      	mov	r2, r1
 80015d8:	2300      	movs	r3, #0
 80015da:	4690      	mov	r8, r2
 80015dc:	4699      	mov	r9, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80015ea:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80015ee:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80015f2:	460a      	mov	r2, r1
 80015f4:	2300      	movs	r3, #0
 80015f6:	4614      	mov	r4, r2
 80015f8:	461d      	mov	r5, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	016b      	lsls	r3, r5, #5
 8001604:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001608:	0162      	lsls	r2, r4, #5
 800160a:	460b      	mov	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	3307      	adds	r3, #7
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	ebad 0d03 	sub.w	sp, sp, r3
 8001618:	466b      	mov	r3, sp
 800161a:	3303      	adds	r3, #3
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	60bb      	str	r3, [r7, #8]
  for (uint8_t i = 0; i < iFilterLen; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	74fb      	strb	r3, [r7, #19]
 8001626:	e00b      	b.n	8001640 <EC_Get_Median_Num+0x80>
    bTab[i] = bArray[i];
 8001628:	7cfb      	ldrb	r3, [r7, #19]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	7cfa      	ldrb	r2, [r7, #19]
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < iFilterLen; i++)
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	3301      	adds	r3, #1
 800163e:	74fb      	strb	r3, [r7, #19]
 8001640:	7cfb      	ldrb	r3, [r7, #19]
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	dcef      	bgt.n	8001628 <EC_Get_Median_Num+0x68>
  int i, j;
  float bTemp;

  for (j = 0; j < iFilterLen - 1; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	e038      	b.n	80016c0 <EC_Get_Median_Num+0x100>
    for (i = 0; i < iFilterLen - j - 1; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e02b      	b.n	80016ac <EC_Get_Median_Num+0xec>
      if (bTab[i] > bTab[i + 1]) {
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	1c59      	adds	r1, r3, #1
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001666:	429a      	cmp	r2, r3
 8001668:	d91d      	bls.n	80016a6 <EC_Get_Median_Num+0xe6>
        bTemp = bTab[i];
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167a:	edc7 7a07 	vstr	s15, [r7, #28]
        bTab[i] = bTab[i + 1];
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        bTab[i + 1] = bTemp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	edd7 7a07 	vldr	s15, [r7, #28]
 8001698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800169c:	ee17 1a90 	vmov	r1, s15
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < iFilterLen - j - 1; i++) {
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbcc      	blt.n	8001654 <EC_Get_Median_Num+0x94>
  for (j = 0; j < iFilterLen - 1; j++) {
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3301      	adds	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dbc1      	blt.n	800164e <EC_Get_Median_Num+0x8e>
      }
    }
  }
  if ((iFilterLen & 1) > 0)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dd0f      	ble.n	80016f4 <EC_Get_Median_Num+0x134>
    bTemp = bTab[(iFilterLen - 1) / 2];
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	0fda      	lsrs	r2, r3, #31
 80016da:	4413      	add	r3, r2
 80016dc:	105b      	asrs	r3, r3, #1
 80016de:	461a      	mov	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ee:	edc7 7a07 	vstr	s15, [r7, #28]
 80016f2:	e017      	b.n	8001724 <EC_Get_Median_Num+0x164>

  else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	0fda      	lsrs	r2, r3, #31
 80016f8:	4413      	add	r3, r2
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	0fd9      	lsrs	r1, r3, #31
 8001708:	440b      	add	r3, r1
 800170a:	105b      	asrs	r3, r3, #1
 800170c:	1e59      	subs	r1, r3, #1
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001714:	4413      	add	r3, r2
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001720:	edc7 7a07 	vstr	s15, [r7, #28]
  return bTemp * 1.48148148;
 8001724:	69f8      	ldr	r0, [r7, #28]
 8001726:	f7fe feb3 	bl	8000490 <__aeabi_f2d>
 800172a:	a30b      	add	r3, pc, #44	; (adr r3, 8001758 <EC_Get_Median_Num+0x198>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff06 	bl	8000540 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f93a 	bl	80009b4 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	46b5      	mov	sp, r6
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	eca3acc3 	.word	0xeca3acc3
 800175c:	3ff7b425 	.word	0x3ff7b425

08001760 <EC_Get_Value>:


float EC_Get_Value()
{
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
	EC_Buffera_Topla();
 8001768:	f7ff ff02 	bl	8001570 <EC_Buffera_Topla>
    averageVoltage = EC_Get_Median_Num(analogBuffer, SCOUNT) * (float)VREF / 1024.0;
 800176c:	211e      	movs	r1, #30
 800176e:	4866      	ldr	r0, [pc, #408]	; (8001908 <EC_Get_Value+0x1a8>)
 8001770:	f7ff ff26 	bl	80015c0 <EC_Get_Median_Num>
 8001774:	eef0 7a40 	vmov.f32	s15, s0
 8001778:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800177c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001780:	ee17 0a90 	vmov	r0, s15
 8001784:	f7fe fe84 	bl	8000490 <__aeabi_f2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b5f      	ldr	r3, [pc, #380]	; (800190c <EC_Get_Value+0x1ac>)
 800178e:	f7ff f801 	bl	8000794 <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f90b 	bl	80009b4 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <EC_Get_Value+0x1b0>)
 80017a2:	6013      	str	r3, [r2, #0]
    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);                                                                                                                //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
 80017a4:	4b5b      	ldr	r3, [pc, #364]	; (8001914 <EC_Get_Value+0x1b4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fe71 	bl	8000490 <__aeabi_f2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b59      	ldr	r3, [pc, #356]	; (8001918 <EC_Get_Value+0x1b8>)
 80017b4:	f7fe fd0c 	bl	80001d0 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	a349      	add	r3, pc, #292	; (adr r3, 80018e8 <EC_Get_Value+0x188>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7fe febb 	bl	8000540 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b51      	ldr	r3, [pc, #324]	; (800191c <EC_Get_Value+0x1bc>)
 80017d8:	f7fe fcfc 	bl	80001d4 <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f8e6 	bl	80009b4 <__aeabi_d2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	607b      	str	r3, [r7, #4]
    float compensationVolatge = averageVoltage / compensationCoefficient;                                                                                                             //temperature compensation
 80017ec:	4b48      	ldr	r3, [pc, #288]	; (8001910 <EC_Get_Value+0x1b0>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	edc7 7a00 	vstr	s15, [r7]
    tdsValue = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5;  //convert voltage value to tds value
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fe46 	bl	8000490 <__aeabi_f2d>
 8001804:	a33a      	add	r3, pc, #232	; (adr r3, 80018f0 <EC_Get_Value+0x190>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fe99 	bl	8000540 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4614      	mov	r4, r2
 8001814:	461d      	mov	r5, r3
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f7fe fe3a 	bl	8000490 <__aeabi_f2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4620      	mov	r0, r4
 8001822:	4629      	mov	r1, r5
 8001824:	f7fe fe8c 	bl	8000540 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f7fe fe2d 	bl	8000490 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fe7f 	bl	8000540 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f7fe fe20 	bl	8000490 <__aeabi_f2d>
 8001850:	a329      	add	r3, pc, #164	; (adr r3, 80018f8 <EC_Get_Value+0x198>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fe73 	bl	8000540 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4690      	mov	r8, r2
 8001860:	4699      	mov	r9, r3
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fe14 	bl	8000490 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4640      	mov	r0, r8
 800186e:	4649      	mov	r1, r9
 8001870:	f7fe fe66 	bl	8000540 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fca8 	bl	80001d0 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f7fe fe01 	bl	8000490 <__aeabi_f2d>
 800188e:	a31c      	add	r3, pc, #112	; (adr r3, 8001900 <EC_Get_Value+0x1a0>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fe54 	bl	8000540 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fc98 	bl	80001d4 <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <EC_Get_Value+0x1c0>)
 80018b2:	f7fe fe45 	bl	8000540 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f879 	bl	80009b4 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <EC_Get_Value+0x1c4>)
 80018c6:	6013      	str	r3, [r2, #0]
    HAL_Delay(800);
 80018c8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80018cc:	f001 fca0 	bl	8003210 <HAL_Delay>
    return tdsValue;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <EC_Get_Value+0x1c4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	ee07 3a90 	vmov	s15, r3

}
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e4:	f3af 8000 	nop.w
 80018e8:	47ae147b 	.word	0x47ae147b
 80018ec:	3f947ae1 	.word	0x3f947ae1
 80018f0:	a3d70a3d 	.word	0xa3d70a3d
 80018f4:	4060ad70 	.word	0x4060ad70
 80018f8:	1eb851ec 	.word	0x1eb851ec
 80018fc:	406ffb85 	.word	0x406ffb85
 8001900:	b851eb85 	.word	0xb851eb85
 8001904:	408acb1e 	.word	0x408acb1e
 8001908:	2000006c 	.word	0x2000006c
 800190c:	40900000 	.word	0x40900000
 8001910:	200000e4 	.word	0x200000e4
 8001914:	20000000 	.word	0x20000000
 8001918:	40390000 	.word	0x40390000
 800191c:	3ff00000 	.word	0x3ff00000
 8001920:	3fe00000 	.word	0x3fe00000
 8001924:	200000e8 	.word	0x200000e8

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ffc2 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c4:	f001 fbb2 	bl	800312c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c8:	f000 f8e2 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019cc:	f000 fb2a 	bl	8002024 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019d0:	f000 f948 	bl	8001c64 <MX_ADC1_Init>
  MX_I2C1_Init();
 80019d4:	f000 fa3c 	bl	8001e50 <MX_I2C1_Init>
  MX_I2C2_Init();
 80019d8:	f000 fa68 	bl	8001eac <MX_I2C2_Init>
  MX_I2C3_Init();
 80019dc:	f000 fa94 	bl	8001f08 <MX_I2C3_Init>
  MX_TIM6_Init();
 80019e0:	f000 fac0 	bl	8001f64 <MX_TIM6_Init>
  MX_ADC2_Init();
 80019e4:	f000 f990 	bl	8001d08 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80019e8:	f000 faf2 	bl	8001fd0 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80019ec:	f000 f9de 	bl	8001dac <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  Sistem_Init();
 80019f0:	f000 fbd6 	bl	80021a0 <Sistem_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2, &Bitki_Turu, 1, 100);
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	2201      	movs	r2, #1
 80019f8:	495e      	ldr	r1, [pc, #376]	; (8001b74 <main+0x1b4>)
 80019fa:	485f      	ldr	r0, [pc, #380]	; (8001b78 <main+0x1b8>)
 80019fc:	f004 fe5f 	bl	80066be <HAL_UART_Receive>

	  for(ornek = 0; ornek < 10; ornek++)
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <main+0x1bc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e05b      	b.n	8001ac0 <main+0x100>
	  {

		 Bitki_Anlik_Veriler.Ortam_Sicaklik += BMP180_Sicaklik_Okuma();
 8001a08:	f7ff fb8c 	bl	8001124 <BMP180_Sicaklik_Okuma>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <main+0x1c0>)
 8001a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <main+0x1c0>)
 8001a1c:	edc3 7a01 	vstr	s15, [r3, #4]

		 Bitki_Anlik_Veriler.Isik_Siddeti_1 += BH1750_ReadLight(&hi2c1);
 8001a20:	4858      	ldr	r0, [pc, #352]	; (8001b84 <main+0x1c4>)
 8001a22:	f7ff fa53 	bl	8000ecc <BH1750_ReadLight>
 8001a26:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2a:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <main+0x1c0>)
 8001a2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	4b52      	ldr	r3, [pc, #328]	; (8001b80 <main+0x1c0>)
 8001a36:	edc3 7a02 	vstr	s15, [r3, #8]
		 Bitki_Anlik_Veriler.Isik_Siddeti_2 += BH1750_ReadLight(&hi2c2);
 8001a3a:	4853      	ldr	r0, [pc, #332]	; (8001b88 <main+0x1c8>)
 8001a3c:	f7ff fa46 	bl	8000ecc <BH1750_ReadLight>
 8001a40:	eeb0 7a40 	vmov.f32	s14, s0
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <main+0x1c0>)
 8001a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <main+0x1c0>)
 8001a50:	edc3 7a03 	vstr	s15, [r3, #12]

		 Bitki_Anlik_Veriler.Su_Sicaklik += DS18B20_ReadValue();
 8001a54:	f7ff fd12 	bl	800147c <DS18B20_ReadValue>
 8001a58:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <main+0x1c0>)
 8001a5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <main+0x1c0>)
 8001a68:	edc3 7a04 	vstr	s15, [r3, #16]

		 Bitki_Anlik_Veriler.Su_Seviye += Su_Seviye_Degeri_Okuma();
 8001a6c:	f000 fc80 	bl	8002370 <Su_Seviye_Degeri_Okuma>
 8001a70:	eeb0 7a40 	vmov.f32	s14, s0
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <main+0x1c0>)
 8001a76:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <main+0x1c0>)
 8001a80:	edc3 7a05 	vstr	s15, [r3, #20]

		 Bitki_Anlik_Veriler.pH += PH_Deger_Okuma();
 8001a84:	f000 fc9c 	bl	80023c0 <PH_Deger_Okuma>
 8001a88:	eeb0 7a40 	vmov.f32	s14, s0
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <main+0x1c0>)
 8001a8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a96:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <main+0x1c0>)
 8001a98:	edc3 7a06 	vstr	s15, [r3, #24]

		 Bitki_Anlik_Veriler.EC += EC_Get_Value();
 8001a9c:	f7ff fe60 	bl	8001760 <EC_Get_Value>
 8001aa0:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <main+0x1c0>)
 8001aa6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <main+0x1c0>)
 8001ab0:	edc3 7a07 	vstr	s15, [r3, #28]
	  for(ornek = 0; ornek < 10; ornek++)
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <main+0x1bc>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <main+0x1bc>)
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <main+0x1bc>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d99f      	bls.n	8001a08 <main+0x48>
	  }

	  Bitki_Anlik_Veriler.Ortam_Sicaklik = Bitki_Anlik_Veriler.Ortam_Sicaklik / 10;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <main+0x1c0>)
 8001aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ace:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <main+0x1c0>)
 8001ad8:	edc3 7a01 	vstr	s15, [r3, #4]

	  Bitki_Anlik_Veriler.Isik_Siddeti_1 = Bitki_Anlik_Veriler.Isik_Siddeti_1 / 10;
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <main+0x1c0>)
 8001ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <main+0x1c0>)
 8001aec:	edc3 7a02 	vstr	s15, [r3, #8]
	  Bitki_Anlik_Veriler.Isik_Siddeti_2 = Bitki_Anlik_Veriler.Isik_Siddeti_2 / 10;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <main+0x1c0>)
 8001af2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001af6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afe:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <main+0x1c0>)
 8001b00:	edc3 7a03 	vstr	s15, [r3, #12]

	  Bitki_Anlik_Veriler.Su_Sicaklik = Bitki_Anlik_Veriler.Su_Sicaklik / 10;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <main+0x1c0>)
 8001b06:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b0a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <main+0x1c0>)
 8001b14:	edc3 7a04 	vstr	s15, [r3, #16]

	  Bitki_Anlik_Veriler.Su_Seviye = Bitki_Anlik_Veriler.Su_Seviye / 10;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <main+0x1c0>)
 8001b1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <main+0x1c0>)
 8001b28:	edc3 7a05 	vstr	s15, [r3, #20]

	  Bitki_Anlik_Veriler.pH = Bitki_Anlik_Veriler.pH / 10;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <main+0x1c0>)
 8001b2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b32:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <main+0x1c0>)
 8001b3c:	edc3 7a06 	vstr	s15, [r3, #24]

	  Bitki_Anlik_Veriler.EC = Bitki_Anlik_Veriler.EC / 10;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <main+0x1c0>)
 8001b42:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b46:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <main+0x1c0>)
 8001b50:	edc3 7a07 	vstr	s15, [r3, #28]

	  Parse();
 8001b54:	f000 fc90 	bl	8002478 <Parse>

	  HAL_UART_Transmit(&huart2, gonderilecek_buffer, sizeof(gonderilecek_buffer), 10);
 8001b58:	230a      	movs	r3, #10
 8001b5a:	2218      	movs	r2, #24
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <main+0x1cc>)
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <main+0x1b8>)
 8001b60:	f004 fd1b 	bl	800659a <HAL_UART_Transmit>

	  Led_Kontrol();
 8001b64:	f000 ff7e 	bl	8002a64 <Led_Kontrol>
	  Motor_Kontrol();
 8001b68:	f000 ffc8 	bl	8002afc <Motor_Kontrol>

	  Anlik_Verileri_Sifirla();
 8001b6c:	f001 f818 	bl	8002ba0 <Anlik_Verileri_Sifirla>
	  HAL_UART_Receive(&huart2, &Bitki_Turu, 1, 100);
 8001b70:	e740      	b.n	80019f4 <main+0x34>
 8001b72:	bf00      	nop
 8001b74:	2000040c 	.word	0x2000040c
 8001b78:	200003c8 	.word	0x200003c8
 8001b7c:	20000428 	.word	0x20000428
 8001b80:	2000018c 	.word	0x2000018c
 8001b84:	20000284 	.word	0x20000284
 8001b88:	200002d8 	.word	0x200002d8
 8001b8c:	20000410 	.word	0x20000410

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	2230      	movs	r2, #48	; 0x30
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 f936 	bl	8006e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <SystemClock_Config+0xcc>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <SystemClock_Config+0xd0>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <SystemClock_Config+0xd0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c04:	23a8      	movs	r3, #168	; 0xa8
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fe07 	bl	8005828 <HAL_RCC_OscConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c20:	f000 ffe8 	bl	8002bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c24:	230f      	movs	r3, #15
 8001c26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2105      	movs	r1, #5
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 f868 	bl	8005d18 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c4e:	f000 ffd1 	bl	8002bf4 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3750      	adds	r7, #80	; 0x50
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <MX_ADC1_Init+0x9c>)
 8001c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <MX_ADC1_Init+0xa0>)
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001cc6:	f001 fac7 	bl	8003258 <HAL_ADC_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cd0:	f000 ff90 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_ADC1_Init+0x98>)
 8001ce6:	f001 fc99 	bl	800361c <HAL_ADC_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cf0:	f000 ff80 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200001ac 	.word	0x200001ac
 8001d00:	40012000 	.word	0x40012000
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d0e:	463b      	mov	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d1c:	4a21      	ldr	r2, [pc, #132]	; (8001da4 <MX_ADC2_Init+0x9c>)
 8001d1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <MX_ADC2_Init+0xa0>)
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d6a:	f001 fa75 	bl	8003258 <HAL_ADC_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001d74:	f000 ff3e 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_ADC2_Init+0x98>)
 8001d8a:	f001 fc47 	bl	800361c <HAL_ADC_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001d94:	f000 ff2e 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200001f4 	.word	0x200001f4
 8001da4:	40012100 	.word	0x40012100
 8001da8:	0f000001 	.word	0x0f000001

08001dac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001db2:	463b      	mov	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <MX_ADC3_Init+0x9c>)
 8001dc2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <MX_ADC3_Init+0xa0>)
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001e0e:	f001 fa23 	bl	8003258 <HAL_ADC_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001e18:	f000 feec 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e1c:	230a      	movs	r3, #10
 8001e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_ADC3_Init+0x98>)
 8001e2e:	f001 fbf5 	bl	800361c <HAL_ADC_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001e38:	f000 fedc 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2000023c 	.word	0x2000023c
 8001e48:	40012200 	.word	0x40012200
 8001e4c:	0f000001 	.word	0x0f000001

08001e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <MX_I2C1_Init+0x54>)
 8001e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_I2C1_Init+0x58>)
 8001e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <MX_I2C1_Init+0x50>)
 8001e8e:	f002 f897 	bl	8003fc0 <HAL_I2C_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e98:	f000 feac 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000284 	.word	0x20000284
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	00061a80 	.word	0x00061a80

08001eac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_I2C2_Init+0x50>)
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <MX_I2C2_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_I2C2_Init+0x50>)
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_I2C2_Init+0x58>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_I2C2_Init+0x50>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ece:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_I2C2_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_I2C2_Init+0x50>)
 8001eea:	f002 f869 	bl	8003fc0 <HAL_I2C_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 fe7e 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200002d8 	.word	0x200002d8
 8001f00:	40005800 	.word	0x40005800
 8001f04:	000186a0 	.word	0x000186a0

08001f08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <MX_I2C3_Init+0x54>)
 8001f10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_I2C3_Init+0x58>)
 8001f16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_I2C3_Init+0x50>)
 8001f46:	f002 f83b 	bl	8003fc0 <HAL_I2C_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f50:	f000 fe50 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000032c 	.word	0x2000032c
 8001f5c:	40005c00 	.word	0x40005c00
 8001f60:	000186a0 	.word	0x000186a0

08001f64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <MX_TIM6_Init+0x68>)
 8001f76:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f7a:	2231      	movs	r2, #49	; 0x31
 8001f7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f92:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001f94:	f004 f8e0 	bl	8006158 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f9e:	f000 fe29 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_TIM6_Init+0x64>)
 8001fb0:	f004 fa2a 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001fba:	f000 fe1b 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000380 	.word	0x20000380
 8001fcc:	40001000 	.word	0x40001000

08001fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <MX_USART2_UART_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART2_UART_Init+0x4c>)
 8002008:	f004 fa7a 	bl	8006500 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002012:	f000 fdef 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200003c8 	.word	0x200003c8
 8002020:	40004400 	.word	0x40004400

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b53      	ldr	r3, [pc, #332]	; (800218c <MX_GPIO_Init+0x168>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a52      	ldr	r2, [pc, #328]	; (800218c <MX_GPIO_Init+0x168>)
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b50      	ldr	r3, [pc, #320]	; (800218c <MX_GPIO_Init+0x168>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <MX_GPIO_Init+0x168>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a4b      	ldr	r2, [pc, #300]	; (800218c <MX_GPIO_Init+0x168>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <MX_GPIO_Init+0x168>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b45      	ldr	r3, [pc, #276]	; (800218c <MX_GPIO_Init+0x168>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a44      	ldr	r2, [pc, #272]	; (800218c <MX_GPIO_Init+0x168>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b42      	ldr	r3, [pc, #264]	; (800218c <MX_GPIO_Init+0x168>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <MX_GPIO_Init+0x168>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a3d      	ldr	r2, [pc, #244]	; (800218c <MX_GPIO_Init+0x168>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <MX_GPIO_Init+0x168>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <MX_GPIO_Init+0x168>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <MX_GPIO_Init+0x168>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <MX_GPIO_Init+0x168>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_SENSOR_GPIO_Port, DS18B20_SENSOR_Pin, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2102      	movs	r1, #2
 80020ca:	4831      	ldr	r0, [pc, #196]	; (8002190 <MX_GPIO_Init+0x16c>)
 80020cc:	f001 ff5e 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DHT22_Pin|FAN_2_ROLE_Pin|FAN_1_ROLE_Pin|LED_2_ROLE_Pin
 80020d0:	2200      	movs	r2, #0
 80020d2:	f248 01ff 	movw	r1, #33023	; 0x80ff
 80020d6:	482f      	ldr	r0, [pc, #188]	; (8002194 <MX_GPIO_Init+0x170>)
 80020d8:	f001 ff58 	bl	8003f8c <HAL_GPIO_WritePin>
                          |LED_1_ROLE_Pin|PH_DUSURUCU_ROLE_Pin|PH_ARTIRICI_ROLE_Pin|EC_ROLE_Pin
                          |SU_ROLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISITI_ROLE_GPIO_Port, ISITI_ROLE_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020e2:	482d      	ldr	r0, [pc, #180]	; (8002198 <MX_GPIO_Init+0x174>)
 80020e4:	f001 ff52 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_TAHLIYE_ROLE_Pin|MOTOR_ROLE_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2118      	movs	r1, #24
 80020ec:	482b      	ldr	r0, [pc, #172]	; (800219c <MX_GPIO_Init+0x178>)
 80020ee:	f001 ff4d 	bl	8003f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_SENSOR_Pin */
  GPIO_InitStruct.Pin = DS18B20_SENSOR_Pin;
 80020f2:	2302      	movs	r3, #2
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2300      	movs	r3, #0
 8002100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4821      	ldr	r0, [pc, #132]	; (8002190 <MX_GPIO_Init+0x16c>)
 800210a:	f001 fd8b 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002114:	2311      	movs	r3, #17
 8002116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	4619      	mov	r1, r3
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <MX_GPIO_Init+0x170>)
 8002128:	f001 fd7c 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISITI_ROLE_Pin */
  GPIO_InitStruct.Pin = ISITI_ROLE_Pin;
 800212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ISITI_ROLE_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4814      	ldr	r0, [pc, #80]	; (8002198 <MX_GPIO_Init+0x174>)
 8002146:	f001 fd6d 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN_2_ROLE_Pin FAN_1_ROLE_Pin LED_2_ROLE_Pin LED_1_ROLE_Pin
                           PH_DUSURUCU_ROLE_Pin PH_ARTIRICI_ROLE_Pin EC_ROLE_Pin SU_ROLE_Pin */
  GPIO_InitStruct.Pin = FAN_2_ROLE_Pin|FAN_1_ROLE_Pin|LED_2_ROLE_Pin|LED_1_ROLE_Pin
 800214a:	23ff      	movs	r3, #255	; 0xff
 800214c:	617b      	str	r3, [r7, #20]
                          |PH_DUSURUCU_ROLE_Pin|PH_ARTIRICI_ROLE_Pin|EC_ROLE_Pin|SU_ROLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	480c      	ldr	r0, [pc, #48]	; (8002194 <MX_GPIO_Init+0x170>)
 8002162:	f001 fd5f 	bl	8003c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_TAHLIYE_ROLE_Pin MOTOR_ROLE_Pin */
  GPIO_InitStruct.Pin = RESET_TAHLIYE_ROLE_Pin|MOTOR_ROLE_Pin;
 8002166:	2318      	movs	r3, #24
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4807      	ldr	r0, [pc, #28]	; (800219c <MX_GPIO_Init+0x178>)
 800217e:	f001 fd51 	bl	8003c24 <HAL_GPIO_Init>

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40020800 	.word	0x40020800
 800219c:	40020400 	.word	0x40020400

080021a0 <Sistem_Init>:
  *
  * @retval void
  */

void Sistem_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	/* MARUL */
	Marul.PH_MIN 				    = MARUL_PH_MIN;
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <Sistem_Init+0x148>)
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <Sistem_Init+0x14c>)
 80021a8:	601a      	str	r2, [r3, #0]
	Marul.PH_MAX 				    = MARUL_PH_MAX;
 80021aa:	4b4f      	ldr	r3, [pc, #316]	; (80022e8 <Sistem_Init+0x148>)
 80021ac:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <Sistem_Init+0x150>)
 80021ae:	605a      	str	r2, [r3, #4]
	Marul.EC_MIN 				    = MARUL_EC_MIN;
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <Sistem_Init+0x148>)
 80021b2:	4a50      	ldr	r2, [pc, #320]	; (80022f4 <Sistem_Init+0x154>)
 80021b4:	609a      	str	r2, [r3, #8]
	Marul.EC_MAX 				    = MARUL_EC_MAX;
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <Sistem_Init+0x148>)
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <Sistem_Init+0x158>)
 80021ba:	60da      	str	r2, [r3, #12]
	Marul.ORTAM_SICAKLIK_MIN 	    = MARUL_ORTAM_SICAKLIK_MIN;
 80021bc:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <Sistem_Init+0x148>)
 80021be:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <Sistem_Init+0x15c>)
 80021c0:	611a      	str	r2, [r3, #16]
	Marul.ORTAM_SICAKLIK_MAX 	    = MARUL_ORTAM_SICAKLIK_MAX;
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <Sistem_Init+0x148>)
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <Sistem_Init+0x160>)
 80021c6:	615a      	str	r2, [r3, #20]
	Marul.ORTAM_NEM_MIN 		    = MARUL_ORTAM_NEM_MIN;
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <Sistem_Init+0x148>)
 80021ca:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <Sistem_Init+0x164>)
 80021cc:	619a      	str	r2, [r3, #24]
	Marul.ORTAM_NEM_MAX 		    = MARUL_ORTAM_NEM_MAX;
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <Sistem_Init+0x148>)
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <Sistem_Init+0x168>)
 80021d2:	61da      	str	r2, [r3, #28]

	/* CILEK */
	Cilek.PH_MIN 				    = CILEK_PH_MIN;
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <Sistem_Init+0x16c>)
 80021d6:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <Sistem_Init+0x170>)
 80021d8:	601a      	str	r2, [r3, #0]
	Cilek.PH_MAX 				    = CILEK_PH_MAX;
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <Sistem_Init+0x16c>)
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <Sistem_Init+0x174>)
 80021de:	605a      	str	r2, [r3, #4]
	Cilek.EC_MIN 				    = CILEK_EC_MIN;
 80021e0:	4b4a      	ldr	r3, [pc, #296]	; (800230c <Sistem_Init+0x16c>)
 80021e2:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <Sistem_Init+0x178>)
 80021e4:	609a      	str	r2, [r3, #8]
	Cilek.EC_MAX 				    = CILEK_EC_MAX;
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <Sistem_Init+0x16c>)
 80021e8:	4a4c      	ldr	r2, [pc, #304]	; (800231c <Sistem_Init+0x17c>)
 80021ea:	60da      	str	r2, [r3, #12]
	Cilek.ORTAM_SICAKLIK_MIN 	    = CILEK_ORTAM_SICAKLIK_MIN;
 80021ec:	4b47      	ldr	r3, [pc, #284]	; (800230c <Sistem_Init+0x16c>)
 80021ee:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <Sistem_Init+0x180>)
 80021f0:	611a      	str	r2, [r3, #16]
	Cilek.ORTAM_SICAKLIK_MAX 	    = CILEK_ORTAM_SICAKLIK_MAX;
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <Sistem_Init+0x16c>)
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <Sistem_Init+0x184>)
 80021f6:	615a      	str	r2, [r3, #20]
	Cilek.ORTAM_NEM_MIN 		    = CILEK_ORTAM_NEM_MIN;
 80021f8:	4b44      	ldr	r3, [pc, #272]	; (800230c <Sistem_Init+0x16c>)
 80021fa:	4a4b      	ldr	r2, [pc, #300]	; (8002328 <Sistem_Init+0x188>)
 80021fc:	619a      	str	r2, [r3, #24]
	Cilek.ORTAM_NEM_MAX 		    = CILEK_ORTAM_NEM_MAX;
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <Sistem_Init+0x16c>)
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <Sistem_Init+0x178>)
 8002202:	61da      	str	r2, [r3, #28]

	/* DOMATES */
	Domates.PH_MIN 					= DOMATES_PH_MIN;
 8002204:	4b49      	ldr	r3, [pc, #292]	; (800232c <Sistem_Init+0x18c>)
 8002206:	4a42      	ldr	r2, [pc, #264]	; (8002310 <Sistem_Init+0x170>)
 8002208:	601a      	str	r2, [r3, #0]
	Domates.PH_MAX 					= DOMATES_PH_MAX;
 800220a:	4b48      	ldr	r3, [pc, #288]	; (800232c <Sistem_Init+0x18c>)
 800220c:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <Sistem_Init+0x150>)
 800220e:	605a      	str	r2, [r3, #4]
	Domates.EC_MIN 					= DOMATES_EC_MIN;
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <Sistem_Init+0x18c>)
 8002212:	4a38      	ldr	r2, [pc, #224]	; (80022f4 <Sistem_Init+0x154>)
 8002214:	609a      	str	r2, [r3, #8]
	Domates.EC_MAX 					= DOMATES_EC_MAX;
 8002216:	4b45      	ldr	r3, [pc, #276]	; (800232c <Sistem_Init+0x18c>)
 8002218:	4a45      	ldr	r2, [pc, #276]	; (8002330 <Sistem_Init+0x190>)
 800221a:	60da      	str	r2, [r3, #12]
	Domates.ORTAM_SICAKLIK_MIN 		= DOMATES_ORTAM_SICAKLIK_MIN;
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <Sistem_Init+0x18c>)
 800221e:	4a40      	ldr	r2, [pc, #256]	; (8002320 <Sistem_Init+0x180>)
 8002220:	611a      	str	r2, [r3, #16]
	Domates.ORTAM_SICAKLIK_MAX 		= DOMATES_ORTAM_SICAKLIK_MAX;
 8002222:	4b42      	ldr	r3, [pc, #264]	; (800232c <Sistem_Init+0x18c>)
 8002224:	4a36      	ldr	r2, [pc, #216]	; (8002300 <Sistem_Init+0x160>)
 8002226:	615a      	str	r2, [r3, #20]
	Domates.ORTAM_NEM_MIN 			= DOMATES_ORTAM_NEM_MIN;
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <Sistem_Init+0x18c>)
 800222a:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <Sistem_Init+0x188>)
 800222c:	619a      	str	r2, [r3, #24]
	Domates.ORTAM_NEM_MAX 			= DOMATES_ORTAM_NEM_MAX;
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <Sistem_Init+0x18c>)
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <Sistem_Init+0x168>)
 8002232:	61da      	str	r2, [r3, #28]

	/* BIBER */
	Biber.PH_MIN 				    = BIBER_PH_MIN;
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <Sistem_Init+0x194>)
 8002236:	4a2d      	ldr	r2, [pc, #180]	; (80022ec <Sistem_Init+0x14c>)
 8002238:	601a      	str	r2, [r3, #0]
	Biber.PH_MAX 				    = BIBER_PH_MAX;
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <Sistem_Init+0x194>)
 800223c:	4a35      	ldr	r2, [pc, #212]	; (8002314 <Sistem_Init+0x174>)
 800223e:	605a      	str	r2, [r3, #4]
	Biber.EC_MIN 				    = BIBER_EC_MIN;
 8002240:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <Sistem_Init+0x194>)
 8002242:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <Sistem_Init+0x198>)
 8002244:	609a      	str	r2, [r3, #8]
	Biber.EC_MAX 				    = BIBER_EC_MAX;
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <Sistem_Init+0x194>)
 8002248:	4a39      	ldr	r2, [pc, #228]	; (8002330 <Sistem_Init+0x190>)
 800224a:	60da      	str	r2, [r3, #12]
	Biber.ORTAM_SICAKLIK_MIN 	    = BIBER_ORTAM_SICAKLIK_MIN;
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <Sistem_Init+0x194>)
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <Sistem_Init+0x19c>)
 8002250:	611a      	str	r2, [r3, #16]
	Biber.ORTAM_SICAKLIK_MAX 	    = BIBER_ORTAM_SICAKLIK_MAX;
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <Sistem_Init+0x194>)
 8002254:	4a3a      	ldr	r2, [pc, #232]	; (8002340 <Sistem_Init+0x1a0>)
 8002256:	615a      	str	r2, [r3, #20]
	Biber.ORTAM_NEM_MIN 		    = BIBER_ORTAM_NEM_MIN;
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <Sistem_Init+0x194>)
 800225a:	4a3a      	ldr	r2, [pc, #232]	; (8002344 <Sistem_Init+0x1a4>)
 800225c:	619a      	str	r2, [r3, #24]
	Biber.ORTAM_NEM_MAX 		    = BIBER_ORTAM_NEM_MAX;
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <Sistem_Init+0x194>)
 8002260:	4a39      	ldr	r2, [pc, #228]	; (8002348 <Sistem_Init+0x1a8>)
 8002262:	61da      	str	r2, [r3, #28]

	/* SALATALIK */
	Salatalik.PH_MIN 				= SALATALIK_PH_MIN;
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <Sistem_Init+0x1ac>)
 8002266:	4a3a      	ldr	r2, [pc, #232]	; (8002350 <Sistem_Init+0x1b0>)
 8002268:	601a      	str	r2, [r3, #0]
	Salatalik.PH_MAX 				= SALATALIK_PH_MAX;
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <Sistem_Init+0x1ac>)
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <Sistem_Init+0x174>)
 800226e:	605a      	str	r2, [r3, #4]
	Salatalik.EC_MIN 				= SALATALIK_EC_MIN;
 8002270:	4b36      	ldr	r3, [pc, #216]	; (800234c <Sistem_Init+0x1ac>)
 8002272:	4a31      	ldr	r2, [pc, #196]	; (8002338 <Sistem_Init+0x198>)
 8002274:	609a      	str	r2, [r3, #8]
	Salatalik.EC_MAX 				= SALATALIK_EC_MAX;
 8002276:	4b35      	ldr	r3, [pc, #212]	; (800234c <Sistem_Init+0x1ac>)
 8002278:	4a2d      	ldr	r2, [pc, #180]	; (8002330 <Sistem_Init+0x190>)
 800227a:	60da      	str	r2, [r3, #12]
	Salatalik.ORTAM_SICAKLIK_MIN 	= SALATALIK_ORTAM_SICAKLIK_MIN;
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <Sistem_Init+0x1ac>)
 800227e:	4a2f      	ldr	r2, [pc, #188]	; (800233c <Sistem_Init+0x19c>)
 8002280:	611a      	str	r2, [r3, #16]
	Salatalik.ORTAM_SICAKLIK_MAX 	= SALATALIK_ORTAM_SICAKLIK_MAX;
 8002282:	4b32      	ldr	r3, [pc, #200]	; (800234c <Sistem_Init+0x1ac>)
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <Sistem_Init+0x184>)
 8002286:	615a      	str	r2, [r3, #20]
	Salatalik.ORTAM_NEM_MIN 		= SALATALIK_ORTAM_NEM_MIN;
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <Sistem_Init+0x1ac>)
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <Sistem_Init+0x1a4>)
 800228c:	619a      	str	r2, [r3, #24]
	Salatalik.ORTAM_NEM_MAX 		= SALATALIK_ORTAM_NEM_MAX;
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <Sistem_Init+0x1ac>)
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <Sistem_Init+0x178>)
 8002292:	61da      	str	r2, [r3, #28]

	BH1750_Init(&hi2c1);
 8002294:	482f      	ldr	r0, [pc, #188]	; (8002354 <Sistem_Init+0x1b4>)
 8002296:	f7fe fd5f 	bl	8000d58 <BH1750_Init>
	BH1750_SetMode(&hi2c1, CONTINUOUS_HIGH_RES_MODE_2);
 800229a:	2111      	movs	r1, #17
 800229c:	482d      	ldr	r0, [pc, #180]	; (8002354 <Sistem_Init+0x1b4>)
 800229e:	f7fe fd91 	bl	8000dc4 <BH1750_SetMode>
	BH1750_Init(&hi2c2);
 80022a2:	482d      	ldr	r0, [pc, #180]	; (8002358 <Sistem_Init+0x1b8>)
 80022a4:	f7fe fd58 	bl	8000d58 <BH1750_Init>
	BH1750_SetMode(&hi2c2, CONTINUOUS_HIGH_RES_MODE_2);
 80022a8:	2111      	movs	r1, #17
 80022aa:	482b      	ldr	r0, [pc, #172]	; (8002358 <Sistem_Init+0x1b8>)
 80022ac:	f7fe fd8a 	bl	8000dc4 <BH1750_SetMode>
	BMP180_Init();
 80022b0:	f7fe ffd6 	bl	8001260 <BMP180_Init>
	//DHT22_Init();

	HAL_TIM_Base_Start(&htim6);
 80022b4:	4829      	ldr	r0, [pc, #164]	; (800235c <Sistem_Init+0x1bc>)
 80022b6:	f003 ff9f 	bl	80061f8 <HAL_TIM_Base_Start>
	HAL_Delay(2000);
 80022ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022be:	f000 ffa7 	bl	8003210 <HAL_Delay>

	SysTick_Config(SystemCoreClock / 1000); 						   // Systicktimer 1ms ayarlandı.
 80022c2:	4b27      	ldr	r3, [pc, #156]	; (8002360 <Sistem_Init+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a27      	ldr	r2, [pc, #156]	; (8002364 <Sistem_Init+0x1c4>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fb54 	bl	800197c <SysTick_Config>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2 | GPIO_PIN_3, Led_Pin_Durum);  // LED ilk durum için açıldı
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <Sistem_Init+0x1c8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	210c      	movs	r1, #12
 80022dc:	4823      	ldr	r0, [pc, #140]	; (800236c <Sistem_Init+0x1cc>)
 80022de:	f001 fe55 	bl	8003f8c <HAL_GPIO_WritePin>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200000ec 	.word	0x200000ec
 80022ec:	40c00000 	.word	0x40c00000
 80022f0:	40e00000 	.word	0x40e00000
 80022f4:	42c80000 	.word	0x42c80000
 80022f8:	43820000 	.word	0x43820000
 80022fc:	41900000 	.word	0x41900000
 8002300:	41f00000 	.word	0x41f00000
 8002304:	42480000 	.word	0x42480000
 8002308:	428c0000 	.word	0x428c0000
 800230c:	2000010c 	.word	0x2000010c
 8002310:	40b00000 	.word	0x40b00000
 8002314:	40d00000 	.word	0x40d00000
 8002318:	42a00000 	.word	0x42a00000
 800231c:	42dc0000 	.word	0x42dc0000
 8002320:	41200000 	.word	0x41200000
 8002324:	41e00000 	.word	0x41e00000
 8002328:	42700000 	.word	0x42700000
 800232c:	2000012c 	.word	0x2000012c
 8002330:	43160000 	.word	0x43160000
 8002334:	2000014c 	.word	0x2000014c
 8002338:	42b40000 	.word	0x42b40000
 800233c:	41700000 	.word	0x41700000
 8002340:	420c0000 	.word	0x420c0000
 8002344:	425c0000 	.word	0x425c0000
 8002348:	42960000 	.word	0x42960000
 800234c:	2000016c 	.word	0x2000016c
 8002350:	40b9999a 	.word	0x40b9999a
 8002354:	20000284 	.word	0x20000284
 8002358:	200002d8 	.word	0x200002d8
 800235c:	20000380 	.word	0x20000380
 8002360:	20000008 	.word	0x20000008
 8002364:	10624dd3 	.word	0x10624dd3
 8002368:	20000004 	.word	0x20000004
 800236c:	40020c00 	.word	0x40020c00

08002370 <Su_Seviye_Degeri_Okuma>:
  *
  * @retval Su Seviye Değeri
  */

float Su_Seviye_Degeri_Okuma()
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
	float temp_seviye_Degeri = 0;
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 800237c:	480e      	ldr	r0, [pc, #56]	; (80023b8 <Su_Seviye_Degeri_Okuma+0x48>)
 800237e:	f000 ffaf 	bl	80032e0 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 8002382:	490e      	ldr	r1, [pc, #56]	; (80023bc <Su_Seviye_Degeri_Okuma+0x4c>)
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <Su_Seviye_Degeri_Okuma+0x48>)
 8002386:	f001 f8b0 	bl	80034ea <HAL_ADC_PollForConversion>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <Su_Seviye_Degeri_Okuma+0x32>
	{
		temp_seviye_Degeri = HAL_ADC_GetValue(&hadc1);
 8002390:	4809      	ldr	r0, [pc, #36]	; (80023b8 <Su_Seviye_Degeri_Okuma+0x48>)
 8002392:	f001 f935 	bl	8003600 <HAL_ADC_GetValue>
 8002396:	ee07 0a90 	vmov	s15, r0
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <Su_Seviye_Degeri_Okuma+0x48>)
 80023a4:	f001 f86e 	bl	8003484 <HAL_ADC_Stop>

	return temp_seviye_Degeri;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	ee07 3a90 	vmov	s15, r3
}
 80023ae:	eeb0 0a67 	vmov.f32	s0, s15
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200001ac 	.word	0x200001ac
 80023bc:	000186a0 	.word	0x000186a0

080023c0 <PH_Deger_Okuma>:
  *
  * @retval pH Değeri
  */

float PH_Deger_Okuma()
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	uint16_t PH_adc = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	807b      	strh	r3, [r7, #2]
	float temp = 0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc3);
 80023d0:	4825      	ldr	r0, [pc, #148]	; (8002468 <PH_Deger_Okuma+0xa8>)
 80023d2:	f000 ff85 	bl	80032e0 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc3, 100000) == HAL_OK)
 80023d6:	4925      	ldr	r1, [pc, #148]	; (800246c <PH_Deger_Okuma+0xac>)
 80023d8:	4823      	ldr	r0, [pc, #140]	; (8002468 <PH_Deger_Okuma+0xa8>)
 80023da:	f001 f886 	bl	80034ea <HAL_ADC_PollForConversion>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d12f      	bne.n	8002444 <PH_Deger_Okuma+0x84>
	{
		PH_adc = HAL_ADC_GetValue(&hadc3);
 80023e4:	4820      	ldr	r0, [pc, #128]	; (8002468 <PH_Deger_Okuma+0xa8>)
 80023e6:	f001 f90b 	bl	8003600 <HAL_ADC_GetValue>
 80023ea:	4603      	mov	r3, r0
 80023ec:	807b      	strh	r3, [r7, #2]
		temp = (pH_katsayi_m * (PH_adc * (5.0 / 4095.0) ) + pH_katsayi_b);
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <PH_Deger_Okuma+0xb0>)
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f84d 	bl	8000490 <__aeabi_f2d>
 80023f6:	4604      	mov	r4, r0
 80023f8:	460d      	mov	r5, r1
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f835 	bl	800046c <__aeabi_i2d>
 8002402:	a317      	add	r3, pc, #92	; (adr r3, 8002460 <PH_Deger_Okuma+0xa0>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f89a 	bl	8000540 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fe f894 	bl	8000540 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4614      	mov	r4, r2
 800241e:	461d      	mov	r5, r3
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <PH_Deger_Okuma+0xb4>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f834 	bl	8000490 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fd fed0 	bl	80001d4 <__adddf3>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe faba 	bl	80009b4 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	607b      	str	r3, [r7, #4]
	}
	HAL_ADC_Stop(&hadc3);
 8002444:	4808      	ldr	r0, [pc, #32]	; (8002468 <PH_Deger_Okuma+0xa8>)
 8002446:	f001 f81d 	bl	8003484 <HAL_ADC_Stop>

	return temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ee07 3a90 	vmov	s15, r3
}
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bdb0      	pop	{r4, r5, r7, pc}
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	14014014 	.word	0x14014014
 8002464:	3f540140 	.word	0x3f540140
 8002468:	2000023c 	.word	0x2000023c
 800246c:	000186a0 	.word	0x000186a0
 8002470:	3fd45d64 	.word	0x3fd45d64
 8002474:	40c761e5 	.word	0x40c761e5

08002478 <Parse>:
  *
  * @retval void
  */

void Parse(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
	/* DHT22 */
	gonderilecek_buffer[0] = (uint8_t) Bitki_Anlik_Veriler.Ortam_Nem;
 800247e:	4bcf      	ldr	r3, [pc, #828]	; (80027bc <Parse+0x344>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002488:	edc7 7a01 	vstr	s15, [r7, #4]
 800248c:	793b      	ldrb	r3, [r7, #4]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4bcb      	ldr	r3, [pc, #812]	; (80027c0 <Parse+0x348>)
 8002492:	701a      	strb	r2, [r3, #0]
	gonderilecek_buffer[1] = (uint8_t)((Bitki_Anlik_Veriler.Ortam_Nem - (float)gonderilecek_buffer[0]) * 100);
 8002494:	4bc9      	ldr	r3, [pc, #804]	; (80027bc <Parse+0x344>)
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	4bc9      	ldr	r3, [pc, #804]	; (80027c0 <Parse+0x348>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024aa:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80027c4 <Parse+0x34c>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80024ba:	793b      	ldrb	r3, [r7, #4]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4bc0      	ldr	r3, [pc, #768]	; (80027c0 <Parse+0x348>)
 80024c0:	705a      	strb	r2, [r3, #1]

	/* BMP180 */
	gonderilecek_buffer[2] = (uint8_t) Bitki_Anlik_Veriler.Ortam_Sicaklik;
 80024c2:	4bbe      	ldr	r3, [pc, #760]	; (80027bc <Parse+0x344>)
 80024c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80024d0:	793b      	ldrb	r3, [r7, #4]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4bba      	ldr	r3, [pc, #744]	; (80027c0 <Parse+0x348>)
 80024d6:	709a      	strb	r2, [r3, #2]
	gonderilecek_buffer[3] = (uint8_t)((Bitki_Anlik_Veriler.Ortam_Sicaklik - (float)gonderilecek_buffer[2]) * 100);
 80024d8:	4bb8      	ldr	r3, [pc, #736]	; (80027bc <Parse+0x344>)
 80024da:	ed93 7a01 	vldr	s14, [r3, #4]
 80024de:	4bb8      	ldr	r3, [pc, #736]	; (80027c0 <Parse+0x348>)
 80024e0:	789b      	ldrb	r3, [r3, #2]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80027c4 <Parse+0x34c>
 80024f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80024fe:	793b      	ldrb	r3, [r7, #4]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4baf      	ldr	r3, [pc, #700]	; (80027c0 <Parse+0x348>)
 8002504:	70da      	strb	r2, [r3, #3]

	/* BH1750  1 */
	gonderilecek_buffer[4] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 / 10000          );
 8002506:	4bad      	ldr	r3, [pc, #692]	; (80027bc <Parse+0x344>)
 8002508:	edd3 7a02 	vldr	s15, [r3, #8]
 800250c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002510:	ee17 2a90 	vmov	r2, s15
 8002514:	4bac      	ldr	r3, [pc, #688]	; (80027c8 <Parse+0x350>)
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4ba8      	ldr	r3, [pc, #672]	; (80027c0 <Parse+0x348>)
 8002520:	711a      	strb	r2, [r3, #4]
	gonderilecek_buffer[5] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 10000) / 1000 );
 8002522:	4ba6      	ldr	r3, [pc, #664]	; (80027bc <Parse+0x344>)
 8002524:	edd3 7a02 	vldr	s15, [r3, #8]
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	ee17 2a90 	vmov	r2, s15
 8002530:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <Parse+0x350>)
 8002532:	fba3 1302 	umull	r1, r3, r3, r2
 8002536:	0b5b      	lsrs	r3, r3, #13
 8002538:	f242 7110 	movw	r1, #10000	; 0x2710
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	4aa2      	ldr	r2, [pc, #648]	; (80027cc <Parse+0x354>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	099b      	lsrs	r3, r3, #6
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b9c      	ldr	r3, [pc, #624]	; (80027c0 <Parse+0x348>)
 800254e:	715a      	strb	r2, [r3, #5]
	gonderilecek_buffer[6] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 1000) / 100   );
 8002550:	4b9a      	ldr	r3, [pc, #616]	; (80027bc <Parse+0x344>)
 8002552:	edd3 7a02 	vldr	s15, [r3, #8]
 8002556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255a:	ee17 2a90 	vmov	r2, s15
 800255e:	4b9b      	ldr	r3, [pc, #620]	; (80027cc <Parse+0x354>)
 8002560:	fba3 1302 	umull	r1, r3, r3, r2
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a97      	ldr	r2, [pc, #604]	; (80027d0 <Parse+0x358>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b91      	ldr	r3, [pc, #580]	; (80027c0 <Parse+0x348>)
 800257c:	719a      	strb	r2, [r3, #6]
	gonderilecek_buffer[7] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 100) / 10     );
 800257e:	4b8f      	ldr	r3, [pc, #572]	; (80027bc <Parse+0x344>)
 8002580:	edd3 7a02 	vldr	s15, [r3, #8]
 8002584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002588:	ee17 2a90 	vmov	r2, s15
 800258c:	4b90      	ldr	r3, [pc, #576]	; (80027d0 <Parse+0x358>)
 800258e:	fba3 1302 	umull	r1, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2164      	movs	r1, #100	; 0x64
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a8d      	ldr	r2, [pc, #564]	; (80027d4 <Parse+0x35c>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <Parse+0x348>)
 80025a8:	71da      	strb	r2, [r3, #7]
	gonderilecek_buffer[8] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_1 % 10             );
 80025aa:	4b84      	ldr	r3, [pc, #528]	; (80027bc <Parse+0x344>)
 80025ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	ee17 1a90 	vmov	r1, s15
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <Parse+0x35c>)
 80025ba:	fba3 2301 	umull	r2, r3, r3, r1
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	1aca      	subs	r2, r1, r3
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <Parse+0x348>)
 80025ce:	721a      	strb	r2, [r3, #8]


	/* BH1750  2 */
	gonderilecek_buffer[9]  = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 / 10000          );
 80025d0:	4b7a      	ldr	r3, [pc, #488]	; (80027bc <Parse+0x344>)
 80025d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025da:	ee17 2a90 	vmov	r2, s15
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <Parse+0x350>)
 80025e0:	fba3 2302 	umull	r2, r3, r3, r2
 80025e4:	0b5b      	lsrs	r3, r3, #13
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <Parse+0x348>)
 80025ea:	725a      	strb	r2, [r3, #9]
	gonderilecek_buffer[10] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 10000) / 1000 );
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <Parse+0x344>)
 80025ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f6:	ee17 2a90 	vmov	r2, s15
 80025fa:	4b73      	ldr	r3, [pc, #460]	; (80027c8 <Parse+0x350>)
 80025fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002600:	0b5b      	lsrs	r3, r3, #13
 8002602:	f242 7110 	movw	r1, #10000	; 0x2710
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4a6f      	ldr	r2, [pc, #444]	; (80027cc <Parse+0x354>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <Parse+0x348>)
 8002618:	729a      	strb	r2, [r3, #10]
	gonderilecek_buffer[11] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 1000) / 100   );
 800261a:	4b68      	ldr	r3, [pc, #416]	; (80027bc <Parse+0x344>)
 800261c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002624:	ee17 2a90 	vmov	r2, s15
 8002628:	4b68      	ldr	r3, [pc, #416]	; (80027cc <Parse+0x354>)
 800262a:	fba3 1302 	umull	r1, r3, r3, r2
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	4a65      	ldr	r2, [pc, #404]	; (80027d0 <Parse+0x358>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <Parse+0x348>)
 8002646:	72da      	strb	r2, [r3, #11]
	gonderilecek_buffer[12] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 100) / 10     );
 8002648:	4b5c      	ldr	r3, [pc, #368]	; (80027bc <Parse+0x344>)
 800264a:	edd3 7a03 	vldr	s15, [r3, #12]
 800264e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002652:	ee17 2a90 	vmov	r2, s15
 8002656:	4b5e      	ldr	r3, [pc, #376]	; (80027d0 <Parse+0x358>)
 8002658:	fba3 1302 	umull	r1, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2164      	movs	r1, #100	; 0x64
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <Parse+0x35c>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <Parse+0x348>)
 8002672:	731a      	strb	r2, [r3, #12]
	gonderilecek_buffer[13] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Isik_Siddeti_2 % 10             );
 8002674:	4b51      	ldr	r3, [pc, #324]	; (80027bc <Parse+0x344>)
 8002676:	edd3 7a03 	vldr	s15, [r3, #12]
 800267a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267e:	ee17 1a90 	vmov	r1, s15
 8002682:	4b54      	ldr	r3, [pc, #336]	; (80027d4 <Parse+0x35c>)
 8002684:	fba3 2301 	umull	r2, r3, r3, r1
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	1aca      	subs	r2, r1, r3
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <Parse+0x348>)
 8002698:	735a      	strb	r2, [r3, #13]


	/* DS18B20 */
	gonderilecek_buffer[14] = (uint8_t) Bitki_Anlik_Veriler.Su_Sicaklik;
 800269a:	4b48      	ldr	r3, [pc, #288]	; (80027bc <Parse+0x344>)
 800269c:	edd3 7a04 	vldr	s15, [r3, #16]
 80026a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80026a8:	793b      	ldrb	r3, [r7, #4]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <Parse+0x348>)
 80026ae:	739a      	strb	r2, [r3, #14]
	gonderilecek_buffer[15] = (uint8_t)((Bitki_Anlik_Veriler.Su_Sicaklik - (float)gonderilecek_buffer[14]) * 100);
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <Parse+0x344>)
 80026b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <Parse+0x348>)
 80026b8:	7b9b      	ldrb	r3, [r3, #14]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80027c4 <Parse+0x34c>
 80026ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80026d6:	793b      	ldrb	r3, [r7, #4]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <Parse+0x348>)
 80026dc:	73da      	strb	r2, [r3, #15]

	/* SU SEVİYE */
	gonderilecek_buffer[16] = (uint8_t) ((uint32_t)Bitki_Anlik_Veriler.Su_Seviye / 1000         );
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <Parse+0x344>)
 80026e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80026e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026e8:	ee17 2a90 	vmov	r2, s15
 80026ec:	4b37      	ldr	r3, [pc, #220]	; (80027cc <Parse+0x354>)
 80026ee:	fba3 2302 	umull	r2, r3, r3, r2
 80026f2:	099b      	lsrs	r3, r3, #6
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <Parse+0x348>)
 80026f8:	741a      	strb	r2, [r3, #16]
	gonderilecek_buffer[17] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 1000) / 100 );
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <Parse+0x344>)
 80026fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002704:	ee17 2a90 	vmov	r2, s15
 8002708:	4b30      	ldr	r3, [pc, #192]	; (80027cc <Parse+0x354>)
 800270a:	fba3 1302 	umull	r1, r3, r3, r2
 800270e:	099b      	lsrs	r3, r3, #6
 8002710:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	4a2d      	ldr	r2, [pc, #180]	; (80027d0 <Parse+0x358>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	b2da      	uxtb	r2, r3
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <Parse+0x348>)
 8002726:	745a      	strb	r2, [r3, #17]
	gonderilecek_buffer[18] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 100) / 10   );
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <Parse+0x344>)
 800272a:	edd3 7a05 	vldr	s15, [r3, #20]
 800272e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002732:	ee17 2a90 	vmov	r2, s15
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <Parse+0x358>)
 8002738:	fba3 1302 	umull	r1, r3, r3, r2
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	2164      	movs	r1, #100	; 0x64
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <Parse+0x35c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <Parse+0x348>)
 8002752:	749a      	strb	r2, [r3, #18]
	gonderilecek_buffer[19] = (uint8_t) (((uint32_t)Bitki_Anlik_Veriler.Su_Seviye % 10)         );
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <Parse+0x344>)
 8002756:	edd3 7a05 	vldr	s15, [r3, #20]
 800275a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275e:	ee17 1a90 	vmov	r1, s15
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <Parse+0x35c>)
 8002764:	fba3 2301 	umull	r2, r3, r3, r1
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	1aca      	subs	r2, r1, r3
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <Parse+0x348>)
 8002778:	74da      	strb	r2, [r3, #19]

	/* PH */
	gonderilecek_buffer[20] = (uint8_t) Bitki_Anlik_Veriler.pH;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <Parse+0x344>)
 800277c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002784:	edc7 7a01 	vstr	s15, [r7, #4]
 8002788:	793b      	ldrb	r3, [r7, #4]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <Parse+0x348>)
 800278e:	751a      	strb	r2, [r3, #20]
	gonderilecek_buffer[21] = (uint8_t)((Bitki_Anlik_Veriler.pH - (float)gonderilecek_buffer[20]) * 100);
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <Parse+0x344>)
 8002792:	ed93 7a06 	vldr	s14, [r3, #24]
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <Parse+0x348>)
 8002798:	7d1b      	ldrb	r3, [r3, #20]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027c4 <Parse+0x34c>
 80027aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80027b6:	793b      	ldrb	r3, [r7, #4]
 80027b8:	e00e      	b.n	80027d8 <Parse+0x360>
 80027ba:	bf00      	nop
 80027bc:	2000018c 	.word	0x2000018c
 80027c0:	20000410 	.word	0x20000410
 80027c4:	42c80000 	.word	0x42c80000
 80027c8:	d1b71759 	.word	0xd1b71759
 80027cc:	10624dd3 	.word	0x10624dd3
 80027d0:	51eb851f 	.word	0x51eb851f
 80027d4:	cccccccd 	.word	0xcccccccd
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <Parse+0x3b8>)
 80027dc:	755a      	strb	r2, [r3, #21]

	/* EC */
	gonderilecek_buffer[22] = (uint8_t) Bitki_Anlik_Veriler.EC;
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <Parse+0x3bc>)
 80027e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80027e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80027ec:	793b      	ldrb	r3, [r7, #4]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <Parse+0x3b8>)
 80027f2:	759a      	strb	r2, [r3, #22]
	gonderilecek_buffer[23] = (uint8_t)((Bitki_Anlik_Veriler.EC - (float)gonderilecek_buffer[22]) * 100);
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <Parse+0x3bc>)
 80027f6:	ed93 7a07 	vldr	s14, [r3, #28]
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <Parse+0x3b8>)
 80027fc:	7d9b      	ldrb	r3, [r3, #22]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002838 <Parse+0x3c0>
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002816:	edc7 7a01 	vstr	s15, [r7, #4]
 800281a:	793b      	ldrb	r3, [r7, #4]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <Parse+0x3b8>)
 8002820:	75da      	strb	r2, [r3, #23]

}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000410 	.word	0x20000410
 8002834:	2000018c 	.word	0x2000018c
 8002838:	42c80000 	.word	0x42c80000

0800283c <Kontrol>:
  *
  * @retval void
  */

void Kontrol(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	  switch(Bitki_Turu)
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <Kontrol+0x5c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	2b04      	cmp	r3, #4
 8002848:	d820      	bhi.n	800288c <Kontrol+0x50>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <Kontrol+0x14>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002865 	.word	0x08002865
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002875 	.word	0x08002875
 800285c:	0800287d 	.word	0x0800287d
 8002860:	08002885 	.word	0x08002885
	  {
	  case MARUL:
		  Role_Kontrol(&Marul);
 8002864:	480d      	ldr	r0, [pc, #52]	; (800289c <Kontrol+0x60>)
 8002866:	f000 f823 	bl	80028b0 <Role_Kontrol>
		  break;
 800286a:	e013      	b.n	8002894 <Kontrol+0x58>
	  case CILEK:
		  Role_Kontrol(&Cilek);
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <Kontrol+0x64>)
 800286e:	f000 f81f 	bl	80028b0 <Role_Kontrol>
		  break;
 8002872:	e00f      	b.n	8002894 <Kontrol+0x58>
	  case DOMATES:
		  Role_Kontrol(&Domates);
 8002874:	480b      	ldr	r0, [pc, #44]	; (80028a4 <Kontrol+0x68>)
 8002876:	f000 f81b 	bl	80028b0 <Role_Kontrol>
		  break;
 800287a:	e00b      	b.n	8002894 <Kontrol+0x58>
	  case BIBER:
		  Role_Kontrol(&Biber);
 800287c:	480a      	ldr	r0, [pc, #40]	; (80028a8 <Kontrol+0x6c>)
 800287e:	f000 f817 	bl	80028b0 <Role_Kontrol>
		  break;
 8002882:	e007      	b.n	8002894 <Kontrol+0x58>
	  case SALATALIK:
		  Role_Kontrol(&Salatalik);
 8002884:	4809      	ldr	r0, [pc, #36]	; (80028ac <Kontrol+0x70>)
 8002886:	f000 f813 	bl	80028b0 <Role_Kontrol>
		  break;
 800288a:	e003      	b.n	8002894 <Kontrol+0x58>
	  default:
		  Role_Kontrol(&Marul);
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <Kontrol+0x60>)
 800288e:	f000 f80f 	bl	80028b0 <Role_Kontrol>
		  break;
 8002892:	bf00      	nop
	  }
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000040c 	.word	0x2000040c
 800289c:	200000ec 	.word	0x200000ec
 80028a0:	2000010c 	.word	0x2000010c
 80028a4:	2000012c 	.word	0x2000012c
 80028a8:	2000014c 	.word	0x2000014c
 80028ac:	2000016c 	.word	0x2000016c

080028b0 <Role_Kontrol>:
  *
  * @retval void
  */

void Role_Kontrol(Bitki_Parametreleri_t* Bitki)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	  if(Bitki_Anlik_Veriler.pH < Bitki->PH_MIN)
 80028b8:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <Role_Kontrol+0x194>)
 80028ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d50e      	bpl.n	80028ec <Role_Kontrol+0x3c>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET); 					// pH Artırıcı Aç
 80028ce:	2201      	movs	r2, #1
 80028d0:	2120      	movs	r1, #32
 80028d2:	485d      	ldr	r0, [pc, #372]	; (8002a48 <Role_Kontrol+0x198>)
 80028d4:	f001 fb5a 	bl	8003f8c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 80028d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028dc:	f000 fc98 	bl	8003210 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET); 				// pH Artırıcı Kapat
 80028e0:	2200      	movs	r2, #0
 80028e2:	2120      	movs	r1, #32
 80028e4:	4858      	ldr	r0, [pc, #352]	; (8002a48 <Role_Kontrol+0x198>)
 80028e6:	f001 fb51 	bl	8003f8c <HAL_GPIO_WritePin>
 80028ea:	e018      	b.n	800291e <Role_Kontrol+0x6e>
	  }
	  else if(Bitki_Anlik_Veriler.pH > Bitki->PH_MAX)
 80028ec:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <Role_Kontrol+0x194>)
 80028ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	dd0d      	ble.n	800291e <Role_Kontrol+0x6e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET); 					// pH Düşürücü Aç
 8002902:	2201      	movs	r2, #1
 8002904:	2110      	movs	r1, #16
 8002906:	4850      	ldr	r0, [pc, #320]	; (8002a48 <Role_Kontrol+0x198>)
 8002908:	f001 fb40 	bl	8003f8c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 800290c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002910:	f000 fc7e 	bl	8003210 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); 				// pH Düşürücü Kapat
 8002914:	2200      	movs	r2, #0
 8002916:	2110      	movs	r1, #16
 8002918:	484b      	ldr	r0, [pc, #300]	; (8002a48 <Role_Kontrol+0x198>)
 800291a:	f001 fb37 	bl	8003f8c <HAL_GPIO_WritePin>
	  }
	  if(Bitki_Anlik_Veriler.EC < Bitki->EC_MIN)
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <Role_Kontrol+0x194>)
 8002920:	ed93 7a07 	vldr	s14, [r3, #28]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	edd3 7a02 	vldr	s15, [r3, #8]
 800292a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	d50e      	bpl.n	8002952 <Role_Kontrol+0xa2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET); 					// EC Aç
 8002934:	2201      	movs	r2, #1
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	4843      	ldr	r0, [pc, #268]	; (8002a48 <Role_Kontrol+0x198>)
 800293a:	f001 fb27 	bl	8003f8c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 800293e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002942:	f000 fc65 	bl	8003210 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET); 				// EC Kapat
 8002946:	2200      	movs	r2, #0
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	483f      	ldr	r0, [pc, #252]	; (8002a48 <Role_Kontrol+0x198>)
 800294c:	f001 fb1e 	bl	8003f8c <HAL_GPIO_WritePin>
 8002950:	e018      	b.n	8002984 <Role_Kontrol+0xd4>
	  }
	  else if(Bitki_Anlik_Veriler.EC > Bitki->EC_MAX)
 8002952:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <Role_Kontrol+0x194>)
 8002954:	ed93 7a07 	vldr	s14, [r3, #28]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	edd3 7a03 	vldr	s15, [r3, #12]
 800295e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	dd0d      	ble.n	8002984 <Role_Kontrol+0xd4>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET); 					// Su Aç
 8002968:	2201      	movs	r2, #1
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	4836      	ldr	r0, [pc, #216]	; (8002a48 <Role_Kontrol+0x198>)
 800296e:	f001 fb0d 	bl	8003f8c <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8002972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002976:	f000 fc4b 	bl	8003210 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET); 				// Su Kapat
 800297a:	2200      	movs	r2, #0
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	4832      	ldr	r0, [pc, #200]	; (8002a48 <Role_Kontrol+0x198>)
 8002980:	f001 fb04 	bl	8003f8c <HAL_GPIO_WritePin>
	  }
	  if(Bitki_Anlik_Veriler.Ortam_Sicaklik < Bitki->ORTAM_SICAKLIK_MIN)
 8002984:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <Role_Kontrol+0x194>)
 8002986:	ed93 7a01 	vldr	s14, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d509      	bpl.n	80029ae <Role_Kontrol+0xfe>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET); 					// Isıtıcı Fan Aç
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a0:	482a      	ldr	r0, [pc, #168]	; (8002a4c <Role_Kontrol+0x19c>)
 80029a2:	f001 faf3 	bl	8003f8c <HAL_GPIO_WritePin>
		  systictimer_isitici_fan = 0;
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <Role_Kontrol+0x1a0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e012      	b.n	80029d4 <Role_Kontrol+0x124>

	  }
	  else if(Bitki_Anlik_Veriler.Ortam_Sicaklik > Bitki->ORTAM_SICAKLIK_MAX)
 80029ae:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <Role_Kontrol+0x194>)
 80029b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80029ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	dd07      	ble.n	80029d4 <Role_Kontrol+0x124>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_SET); 	    // Fan1 Fan2 Aç
 80029c4:	2201      	movs	r2, #1
 80029c6:	2103      	movs	r1, #3
 80029c8:	481f      	ldr	r0, [pc, #124]	; (8002a48 <Role_Kontrol+0x198>)
 80029ca:	f001 fadf 	bl	8003f8c <HAL_GPIO_WritePin>
		  systicktimer_fan = 0;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <Role_Kontrol+0x1a4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
	  }

	  if(Bitki_Anlik_Veriler.Su_Seviye > SU_SEVIYE_MAX)
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <Role_Kontrol+0x194>)
 80029d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80029da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002a58 <Role_Kontrol+0x1a8>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	dd07      	ble.n	80029f8 <Role_Kontrol+0x148>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); 				    // Reset Aç
 80029e8:	2201      	movs	r2, #1
 80029ea:	2108      	movs	r1, #8
 80029ec:	481b      	ldr	r0, [pc, #108]	; (8002a5c <Role_Kontrol+0x1ac>)
 80029ee:	f001 facd 	bl	8003f8c <HAL_GPIO_WritePin>
		  systicktimer_reset = 0;
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <Role_Kontrol+0x1b0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
	  }

	  if(systictimer_isitici_fan > ISITICI_FAN_1DK )
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <Role_Kontrol+0x1a0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d905      	bls.n	8002a10 <Role_Kontrol+0x160>
	 	  {
	 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); 				// Isıtıcı Fan Kapat
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a0a:	4810      	ldr	r0, [pc, #64]	; (8002a4c <Role_Kontrol+0x19c>)
 8002a0c:	f001 fabe 	bl	8003f8c <HAL_GPIO_WritePin>
	 	  }
	 	  if(systicktimer_fan > FAN_1_DK )
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <Role_Kontrol+0x1a4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d904      	bls.n	8002a26 <Role_Kontrol+0x176>
	 	  {
	 		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 |GPIO_PIN_1, GPIO_PIN_RESET);     // Fan1 Fan2 Kapat
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2103      	movs	r1, #3
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <Role_Kontrol+0x198>)
 8002a22:	f001 fab3 	bl	8003f8c <HAL_GPIO_WritePin>
	 	  }
	 	  if(systicktimer_reset > RESET_5_SN)
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <Role_Kontrol+0x1b0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d904      	bls.n	8002a3c <Role_Kontrol+0x18c>
	 	  {
	 		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET); 			    // Reset Kapat
 8002a32:	2200      	movs	r2, #0
 8002a34:	2108      	movs	r1, #8
 8002a36:	4809      	ldr	r0, [pc, #36]	; (8002a5c <Role_Kontrol+0x1ac>)
 8002a38:	f001 faa8 	bl	8003f8c <HAL_GPIO_WritePin>
	 	  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000018c 	.word	0x2000018c
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	20000434 	.word	0x20000434
 8002a54:	20000438 	.word	0x20000438
 8002a58:	44fa0000 	.word	0x44fa0000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	2000043c 	.word	0x2000043c

08002a64 <Led_Kontrol>:
  *
  * @retval void
  */

void Led_Kontrol(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
	Led_Pin_Durum = (Bitki_Anlik_Veriler.Isik_Siddeti_1 > MAX_ISIK_SIDDETI) ? GPIO_PIN_RESET : GPIO_PIN_SET;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <Led_Kontrol+0x7c>)
 8002a6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002ae4 <Led_Kontrol+0x80>
 8002a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	bfcc      	ite	gt
 8002a7c:	2301      	movgt	r3, #1
 8002a7e:	2300      	movle	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f083 0301 	eor.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <Led_Kontrol+0x84>)
 8002a8c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2 | GPIO_PIN_3 ,Led_Pin_Durum);
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <Led_Kontrol+0x84>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	210c      	movs	r1, #12
 8002a96:	4815      	ldr	r0, [pc, #84]	; (8002aec <Led_Kontrol+0x88>)
 8002a98:	f001 fa78 	bl	8003f8c <HAL_GPIO_WritePin>

	if(systicktimer_led >= LED_16_SAAT && systicktimer_led < LED_24_SAAT)
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <Led_Kontrol+0x8c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <Led_Kontrol+0x90>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d30f      	bcc.n	8002ac6 <Led_Kontrol+0x62>
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <Led_Kontrol+0x8c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <Led_Kontrol+0x94>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d80a      	bhi.n	8002ac6 <Led_Kontrol+0x62>
	{
		Led_Pin_Durum = GPIO_PIN_RESET;
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <Led_Kontrol+0x84>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2 | GPIO_PIN_3 ,Led_Pin_Durum);
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <Led_Kontrol+0x84>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	210c      	movs	r1, #12
 8002abe:	480b      	ldr	r0, [pc, #44]	; (8002aec <Led_Kontrol+0x88>)
 8002ac0:	f001 fa64 	bl	8003f8c <HAL_GPIO_WritePin>
	else if(systicktimer_led >= LED_24_SAAT)
	{
	  systicktimer_led = 0;
	  Led_Pin_Durum = GPIO_PIN_SET;
	}
}
 8002ac4:	e00a      	b.n	8002adc <Led_Kontrol+0x78>
	else if(systicktimer_led >= LED_24_SAAT)
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <Led_Kontrol+0x8c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <Led_Kontrol+0x94>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d905      	bls.n	8002adc <Led_Kontrol+0x78>
	  systicktimer_led = 0;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <Led_Kontrol+0x8c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
	  Led_Pin_Durum = GPIO_PIN_SET;
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <Led_Kontrol+0x84>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000018c 	.word	0x2000018c
 8002ae4:	45dac000 	.word	0x45dac000
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	2000042c 	.word	0x2000042c
 8002af4:	036ee800 	.word	0x036ee800
 8002af8:	05265bff 	.word	0x05265bff

08002afc <Motor_Kontrol>:
  *
  * @retval void
  */

void Motor_Kontrol(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,Motor_Pin_Durum);
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <Motor_Kontrol+0x84>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	2110      	movs	r1, #16
 8002b08:	481e      	ldr	r0, [pc, #120]	; (8002b84 <Motor_Kontrol+0x88>)
 8002b0a:	f001 fa3f 	bl	8003f8c <HAL_GPIO_WritePin>

	if(systicktimer_motor >= MOTOR_45_DK && systicktimer_motor < MOTOR_60_DK)
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <Motor_Kontrol+0x8c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <Motor_Kontrol+0x90>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d314      	bcc.n	8002b42 <Motor_Kontrol+0x46>
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <Motor_Kontrol+0x8c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <Motor_Kontrol+0x94>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d20f      	bcs.n	8002b42 <Motor_Kontrol+0x46>
	{

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2110      	movs	r1, #16
 8002b26:	4817      	ldr	r0, [pc, #92]	; (8002b84 <Motor_Kontrol+0x88>)
 8002b28:	f001 fa30 	bl	8003f8c <HAL_GPIO_WritePin>

		Motor_Pin_Durum = GPIO_PIN_RESET;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <Motor_Kontrol+0x84>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
		if(systicktimer_motor >= MOTOR_45_DK + MOTOR_2_DK)
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <Motor_Kontrol+0x8c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <Motor_Kontrol+0x98>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d31e      	bcc.n	8002b7a <Motor_Kontrol+0x7e>
		{
			Kontrol();
 8002b3c:	f7ff fe7e 	bl	800283c <Kontrol>
		if(systicktimer_motor >= MOTOR_45_DK + MOTOR_2_DK)
 8002b40:	e01b      	b.n	8002b7a <Motor_Kontrol+0x7e>
		}
	}
	else if(systicktimer_motor >= MOTOR_60_DK)
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <Motor_Kontrol+0x8c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <Motor_Kontrol+0x94>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d316      	bcc.n	8002b7a <Motor_Kontrol+0x7e>
	{
		systicktimer_motor = 0;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <Motor_Kontrol+0x8c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
		Motor_Pin_Durum = GPIO_PIN_SET;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <Motor_Kontrol+0x84>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]

	 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET); 				// Isıtıcı Fan Kapat
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b5e:	480e      	ldr	r0, [pc, #56]	; (8002b98 <Motor_Kontrol+0x9c>)
 8002b60:	f001 fa14 	bl	8003f8c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0 |GPIO_PIN_1, GPIO_PIN_RESET);     // Fan1 Fan2 Kapat
 8002b64:	2200      	movs	r2, #0
 8002b66:	2103      	movs	r1, #3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <Motor_Kontrol+0xa0>)
 8002b6a:	f001 fa0f 	bl	8003f8c <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 , GPIO_PIN_RESET); 			    // Reset Kapat
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2108      	movs	r1, #8
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <Motor_Kontrol+0x88>)
 8002b74:	f001 fa0a 	bl	8003f8c <HAL_GPIO_WritePin>

	}
}
 8002b78:	e7ff      	b.n	8002b7a <Motor_Kontrol+0x7e>
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000005 	.word	0x20000005
 8002b84:	40020400 	.word	0x40020400
 8002b88:	20000430 	.word	0x20000430
 8002b8c:	002932e0 	.word	0x002932e0
 8002b90:	0036ee80 	.word	0x0036ee80
 8002b94:	002961c0 	.word	0x002961c0
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00

08002ba0 <Anlik_Verileri_Sifirla>:
  *
  * @retval void
  */

void Anlik_Verileri_Sifirla()
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	  Bitki_Anlik_Veriler.EC 			 = 0;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
	  Bitki_Anlik_Veriler.Isik_Siddeti_1 = 0;
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
	  Bitki_Anlik_Veriler.Isik_Siddeti_2 = 0;
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	60da      	str	r2, [r3, #12]
	  Bitki_Anlik_Veriler.Ortam_Nem 	 = 0;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
	  Bitki_Anlik_Veriler.Ortam_Sicaklik = 0;
 8002bc4:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
	  Bitki_Anlik_Veriler.Su_Seviye 	 = 0;
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
	  Bitki_Anlik_Veriler.Su_Sicaklik 	 = 0;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
	  Bitki_Anlik_Veriler.pH 			 = 0;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <Anlik_Verileri_Sifirla+0x50>)
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000018c 	.word	0x2000018c

08002bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <Error_Handler+0x8>
	...

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	; (8002d84 <HAL_ADC_MspInit+0x134>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d128      	bne.n	8002cc4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a43      	ldr	r2, [pc, #268]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a3c      	ldr	r2, [pc, #240]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SU_SEVIYE_Pin;
 8002caa:	2301      	movs	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SU_SEVIYE_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4833      	ldr	r0, [pc, #204]	; (8002d8c <HAL_ADC_MspInit+0x13c>)
 8002cbe:	f000 ffb1 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cc2:	e05a      	b.n	8002d7a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_ADC_MspInit+0x140>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d128      	bne.n	8002d20 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = EC_SENSOR_Pin;
 8002d06:	2310      	movs	r3, #16
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EC_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8002d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d16:	4619      	mov	r1, r3
 8002d18:	481c      	ldr	r0, [pc, #112]	; (8002d8c <HAL_ADC_MspInit+0x13c>)
 8002d1a:	f000 ff83 	bl	8003c24 <HAL_GPIO_Init>
}
 8002d1e:	e02c      	b.n	8002d7a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <HAL_ADC_MspInit+0x144>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d127      	bne.n	8002d7a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_ADC_MspInit+0x138>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PH_SENSOR_Pin;
 8002d62:	2301      	movs	r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d66:	2303      	movs	r3, #3
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PH_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d72:	4619      	mov	r1, r3
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <HAL_ADC_MspInit+0x148>)
 8002d76:	f000 ff55 	bl	8003c24 <HAL_GPIO_Init>
}
 8002d7a:	bf00      	nop
 8002d7c:	3738      	adds	r7, #56	; 0x38
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40012000 	.word	0x40012000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40012100 	.word	0x40012100
 8002d94:	40012200 	.word	0x40012200
 8002d98:	40020800 	.word	0x40020800

08002d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08e      	sub	sp, #56	; 0x38
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5b      	ldr	r2, [pc, #364]	; (8002f28 <HAL_I2C_MspInit+0x18c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12c      	bne.n	8002e18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a59      	ldr	r2, [pc, #356]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_1_SCL_Pin|BH1750_1_SDA_Pin;
 8002dda:	23c0      	movs	r3, #192	; 0xc0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dde:	2312      	movs	r3, #18
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dea:	2304      	movs	r3, #4
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	484e      	ldr	r0, [pc, #312]	; (8002f30 <HAL_I2C_MspInit+0x194>)
 8002df6:	f000 ff15 	bl	8003c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e16:	e083      	b.n	8002f20 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a45      	ldr	r2, [pc, #276]	; (8002f34 <HAL_I2C_MspInit+0x198>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d12d      	bne.n	8002e7e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = BH1750_2_SCL_Pin|BH1750_2_SDA_Pin;
 8002e3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e44:	2312      	movs	r3, #18
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e50:	2304      	movs	r3, #4
 8002e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4835      	ldr	r0, [pc, #212]	; (8002f30 <HAL_I2C_MspInit+0x194>)
 8002e5c:	f000 fee2 	bl	8003c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	e050      	b.n	8002f20 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <HAL_I2C_MspInit+0x19c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d14b      	bne.n	8002f20 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BMP180_SDA_Pin;
 8002ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BMP180_SDA_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eda:	4619      	mov	r1, r3
 8002edc:	4817      	ldr	r0, [pc, #92]	; (8002f3c <HAL_I2C_MspInit+0x1a0>)
 8002ede:	f000 fea1 	bl	8003c24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BMP180_SCL_Pin;
 8002ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee8:	2312      	movs	r3, #18
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BMP180_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efc:	4619      	mov	r1, r3
 8002efe:	4810      	ldr	r0, [pc, #64]	; (8002f40 <HAL_I2C_MspInit+0x1a4>)
 8002f00:	f000 fe90 	bl	8003c24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002f0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_I2C_MspInit+0x190>)
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3738      	adds	r7, #56	; 0x38
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40005400 	.word	0x40005400
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40005800 	.word	0x40005800
 8002f38:	40005c00 	.word	0x40005c00
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020000 	.word	0x40020000

08002f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_TIM_Base_MspInit+0x3c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10d      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_TIM_Base_MspInit+0x40>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_TIM_Base_MspInit+0x40>)
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_TIM_Base_MspInit+0x40>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40001000 	.word	0x40001000
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <HAL_UART_MspInit+0x84>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12b      	bne.n	8003002 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b18      	ldr	r3, [pc, #96]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_UART_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4805      	ldr	r0, [pc, #20]	; (8003014 <HAL_UART_MspInit+0x8c>)
 8002ffe:	f000 fe11 	bl	8003c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	; 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40004400 	.word	0x40004400
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800301c:	e7fe      	b.n	800301c <NMI_Handler+0x4>

0800301e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <MemManage_Handler+0x4>

0800302a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <UsageFault_Handler+0x4>

08003036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	systicktimer_led++;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <SysTick_Handler+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3301      	adds	r3, #1
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <SysTick_Handler+0x40>)
 800306c:	6013      	str	r3, [r2, #0]
	systicktimer_motor++;
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <SysTick_Handler+0x44>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <SysTick_Handler+0x44>)
 8003076:	6013      	str	r3, [r2, #0]
	systicktimer_fan++;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <SysTick_Handler+0x48>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <SysTick_Handler+0x48>)
 8003080:	6013      	str	r3, [r2, #0]
	systictimer_isitici_fan++;
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <SysTick_Handler+0x4c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	4a08      	ldr	r2, [pc, #32]	; (80030ac <SysTick_Handler+0x4c>)
 800308a:	6013      	str	r3, [r2, #0]
	systicktimer_reset++;
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <SysTick_Handler+0x50>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3301      	adds	r3, #1
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <SysTick_Handler+0x50>)
 8003094:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003096:	f000 f89b 	bl	80031d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000042c 	.word	0x2000042c
 80030a4:	20000430 	.word	0x20000430
 80030a8:	20000438 	.word	0x20000438
 80030ac:	20000434 	.word	0x20000434
 80030b0:	2000043c 	.word	0x2000043c

080030b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SystemInit+0x20>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <SystemInit+0x20>)
 80030c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030dc:	480d      	ldr	r0, [pc, #52]	; (8003114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030de:	490e      	ldr	r1, [pc, #56]	; (8003118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030f4:	4c0b      	ldr	r4, [pc, #44]	; (8003124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003102:	f7ff ffd7 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003106:	f003 fe5f 	bl	8006dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310a:	f7fe fc59 	bl	80019c0 <main>
  bx  lr    
 800310e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003118:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800311c:	08006e60 	.word	0x08006e60
  ldr r2, =_sbss
 8003120:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003124:	20000444 	.word	0x20000444

08003128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <ADC_IRQHandler>
	...

0800312c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_Init+0x40>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_Init+0x40>)
 8003142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_Init+0x40>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 fd31 	bl	8003bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315a:	200f      	movs	r0, #15
 800315c:	f000 f808 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003160:	f7ff fd4e 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_InitTick+0x54>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_InitTick+0x58>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	fbb3 f3f1 	udiv	r3, r3, r1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fd3b 	bl	8003c0a <HAL_SYSTICK_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00e      	b.n	80031bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d80a      	bhi.n	80031ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a4:	2200      	movs	r2, #0
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f000 fd11 	bl	8003bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <HAL_InitTick+0x5c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000008 	.word	0x20000008
 80031c8:	20000010 	.word	0x20000010
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000010 	.word	0x20000010
 80031f4:	20000440 	.word	0x20000440

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000440 	.word	0x20000440

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ffee 	bl	80031f8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d005      	beq.n	8003236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_Delay+0x44>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003236:	bf00      	nop
 8003238:	f7ff ffde 	bl	80031f8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d8f7      	bhi.n	8003238 <HAL_Delay+0x28>
  {
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000010 	.word	0x20000010

08003258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e033      	b.n	80032d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fcea 	bl	8002c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800329e:	f023 0302 	bic.w	r3, r3, #2
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fad8 	bl	8003860 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Start+0x1a>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e0b2      	b.n	8003460 <HAL_ADC_Start+0x180>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d018      	beq.n	8003342 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <HAL_ADC_Start+0x18c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a52      	ldr	r2, [pc, #328]	; (8003470 <HAL_ADC_Start+0x190>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0c9a      	lsrs	r2, r3, #18
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003334:	e002      	b.n	800333c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3b01      	subs	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d17a      	bne.n	8003446 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800337a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d106      	bne.n	800339e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f023 0206 	bic.w	r2, r3, #6
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
 800339c:	e002      	b.n	80033a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033ac:	4b31      	ldr	r3, [pc, #196]	; (8003474 <HAL_ADC_Start+0x194>)
 80033ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d12a      	bne.n	800341c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <HAL_ADC_Start+0x198>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d015      	beq.n	80033fc <HAL_ADC_Start+0x11c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_ADC_Start+0x19c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d105      	bne.n	80033e6 <HAL_ADC_Start+0x106>
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_ADC_Start+0x194>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_ADC_Start+0x1a0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d136      	bne.n	800345e <HAL_ADC_Start+0x17e>
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_ADC_Start+0x194>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d130      	bne.n	800345e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d129      	bne.n	800345e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e020      	b.n	800345e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_ADC_Start+0x198>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d11b      	bne.n	800345e <HAL_ADC_Start+0x17e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d114      	bne.n	800345e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e00b      	b.n	800345e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0210 	orr.w	r2, r3, #16
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	20000008 	.word	0x20000008
 8003470:	431bde83 	.word	0x431bde83
 8003474:	40012300 	.word	0x40012300
 8003478:	40012000 	.word	0x40012000
 800347c:	40012100 	.word	0x40012100
 8003480:	40012200 	.word	0x40012200

08003484 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_ADC_Stop+0x16>
 8003496:	2302      	movs	r3, #2
 8003498:	e021      	b.n	80034de <HAL_ADC_Stop+0x5a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d113      	bne.n	8003530 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003516:	d10b      	bne.n	8003530 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f043 0220 	orr.w	r2, r3, #32
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e063      	b.n	80035f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003530:	f7ff fe62 	bl	80031f8 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003536:	e021      	b.n	800357c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d01d      	beq.n	800357c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_ADC_PollForConversion+0x6c>
 8003546:	f7ff fe57 	bl	80031f8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d212      	bcs.n	800357c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b02      	cmp	r3, #2
 8003562:	d00b      	beq.n	800357c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e03d      	b.n	80035f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d1d6      	bne.n	8003538 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0212 	mvn.w	r2, #18
 8003592:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d123      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11f      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d111      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1c>
 8003634:	2302      	movs	r3, #2
 8003636:	e105      	b.n	8003844 <HAL_ADC_ConfigChannel+0x228>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b09      	cmp	r3, #9
 8003646:	d925      	bls.n	8003694 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68d9      	ldr	r1, [r3, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	3b1e      	subs	r3, #30
 800365e:	2207      	movs	r2, #7
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43da      	mvns	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	400a      	ands	r2, r1
 800366c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68d9      	ldr	r1, [r3, #12]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	4603      	mov	r3, r0
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4403      	add	r3, r0
 8003686:	3b1e      	subs	r3, #30
 8003688:	409a      	lsls	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	e022      	b.n	80036da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6919      	ldr	r1, [r3, #16]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	2207      	movs	r2, #7
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43da      	mvns	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	400a      	ands	r2, r1
 80036b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6919      	ldr	r1, [r3, #16]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	4618      	mov	r0, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4403      	add	r3, r0
 80036d0:	409a      	lsls	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d824      	bhi.n	800372c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	3b05      	subs	r3, #5
 80036f4:	221f      	movs	r2, #31
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43da      	mvns	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	400a      	ands	r2, r1
 8003702:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4618      	mov	r0, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	3b05      	subs	r3, #5
 800371e:	fa00 f203 	lsl.w	r2, r0, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	635a      	str	r2, [r3, #52]	; 0x34
 800372a:	e04c      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b0c      	cmp	r3, #12
 8003732:	d824      	bhi.n	800377e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	3b23      	subs	r3, #35	; 0x23
 8003746:	221f      	movs	r2, #31
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43da      	mvns	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	400a      	ands	r2, r1
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	4618      	mov	r0, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	3b23      	subs	r3, #35	; 0x23
 8003770:	fa00 f203 	lsl.w	r2, r0, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
 800377c:	e023      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	3b41      	subs	r3, #65	; 0x41
 8003790:	221f      	movs	r2, #31
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	400a      	ands	r2, r1
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4618      	mov	r0, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	3b41      	subs	r3, #65	; 0x41
 80037ba:	fa00 f203 	lsl.w	r2, r0, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_ADC_ConfigChannel+0x234>)
 80037c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_ADC_ConfigChannel+0x238>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d109      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1cc>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a19      	ldr	r2, [pc, #100]	; (8003854 <HAL_ADC_ConfigChannel+0x238>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d123      	bne.n	800383a <HAL_ADC_ConfigChannel+0x21e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d003      	beq.n	8003802 <HAL_ADC_ConfigChannel+0x1e6>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b11      	cmp	r3, #17
 8003800:	d11b      	bne.n	800383a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b10      	cmp	r3, #16
 8003814:	d111      	bne.n	800383a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_ADC_ConfigChannel+0x23c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_ADC_ConfigChannel+0x240>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	0c9a      	lsrs	r2, r3, #18
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800382c:	e002      	b.n	8003834 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3b01      	subs	r3, #1
 8003832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f9      	bne.n	800382e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40012300 	.word	0x40012300
 8003854:	40012000 	.word	0x40012000
 8003858:	20000008 	.word	0x20000008
 800385c:	431bde83 	.word	0x431bde83

08003860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <ADC_Init+0x1f0>)
 800386a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	021a      	lsls	r2, r3, #8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6899      	ldr	r1, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <ADC_Init+0x1f4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d022      	beq.n	800393e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6899      	ldr	r1, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	e00f      	b.n	800395e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800394c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800395c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0202 	bic.w	r2, r2, #2
 800396c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7e1b      	ldrb	r3, [r3, #24]
 8003978:	005a      	lsls	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	3b01      	subs	r3, #1
 80039b8:	035a      	lsls	r2, r3, #13
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	e007      	b.n	80039d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	051a      	lsls	r2, r3, #20
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6899      	ldr	r1, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a16:	025a      	lsls	r2, r3, #9
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	029a      	lsls	r2, r3, #10
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	609a      	str	r2, [r3, #8]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40012300 	.word	0x40012300
 8003a54:	0f000001 	.word	0x0f000001

08003a58 <__NVIC_SetPriorityGrouping>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_GetPriorityGrouping>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 0307 	and.w	r3, r3, #7
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_SetPriority>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <SysTick_Config>:
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b88:	d301      	bcc.n	8003b8e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e00f      	b.n	8003bae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <SysTick_Config+0x40>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b96:	210f      	movs	r1, #15
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	f7ff ff8e 	bl	8003abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SysTick_Config+0x40>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000e010 	.word	0xe000e010

08003bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff47 	bl	8003a58 <__NVIC_SetPriorityGrouping>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be4:	f7ff ff5c 	bl	8003aa0 <__NVIC_GetPriorityGrouping>
 8003be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f7ff ff8e 	bl	8003b10 <NVIC_EncodePriority>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff5d 	bl	8003abc <__NVIC_SetPriority>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ffb0 	bl	8003b78 <SysTick_Config>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e16b      	b.n	8003f18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c40:	2201      	movs	r2, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	f040 815a 	bne.w	8003f12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d005      	beq.n	8003c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d130      	bne.n	8003cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 0201 	and.w	r2, r3, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d017      	beq.n	8003d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2203      	movs	r2, #3
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d123      	bne.n	8003d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	08da      	lsrs	r2, r3, #3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3208      	adds	r2, #8
 8003d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	220f      	movs	r2, #15
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	08da      	lsrs	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3208      	adds	r2, #8
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2203      	movs	r2, #3
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0203 	and.w	r2, r3, #3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80b4 	beq.w	8003f12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	4a5f      	ldr	r2, [pc, #380]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dba:	4b5d      	ldr	r3, [pc, #372]	; (8003f30 <HAL_GPIO_Init+0x30c>)
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <HAL_GPIO_Init+0x310>)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	220f      	movs	r2, #15
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a52      	ldr	r2, [pc, #328]	; (8003f38 <HAL_GPIO_Init+0x314>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d02b      	beq.n	8003e4a <HAL_GPIO_Init+0x226>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a51      	ldr	r2, [pc, #324]	; (8003f3c <HAL_GPIO_Init+0x318>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d025      	beq.n	8003e46 <HAL_GPIO_Init+0x222>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a50      	ldr	r2, [pc, #320]	; (8003f40 <HAL_GPIO_Init+0x31c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01f      	beq.n	8003e42 <HAL_GPIO_Init+0x21e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4f      	ldr	r2, [pc, #316]	; (8003f44 <HAL_GPIO_Init+0x320>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d019      	beq.n	8003e3e <HAL_GPIO_Init+0x21a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <HAL_GPIO_Init+0x324>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_GPIO_Init+0x216>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4d      	ldr	r2, [pc, #308]	; (8003f4c <HAL_GPIO_Init+0x328>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00d      	beq.n	8003e36 <HAL_GPIO_Init+0x212>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4c      	ldr	r2, [pc, #304]	; (8003f50 <HAL_GPIO_Init+0x32c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <HAL_GPIO_Init+0x20e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4b      	ldr	r2, [pc, #300]	; (8003f54 <HAL_GPIO_Init+0x330>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_GPIO_Init+0x20a>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e00e      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	e00c      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e32:	2306      	movs	r3, #6
 8003e34:	e00a      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e36:	2305      	movs	r3, #5
 8003e38:	e008      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	e006      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e004      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e002      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_GPIO_Init+0x228>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	f002 0203 	and.w	r2, r2, #3
 8003e52:	0092      	lsls	r2, r2, #2
 8003e54:	4093      	lsls	r3, r2
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e5c:	4935      	ldr	r1, [pc, #212]	; (8003f34 <HAL_GPIO_Init+0x310>)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	089b      	lsrs	r3, r3, #2
 8003e62:	3302      	adds	r3, #2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e8e:	4a32      	ldr	r2, [pc, #200]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e94:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f0c:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <HAL_GPIO_Init+0x334>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	f67f ae90 	bls.w	8003c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40013800 	.word	0x40013800
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	40020400 	.word	0x40020400
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020c00 	.word	0x40020c00
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40021400 	.word	0x40021400
 8003f50:	40021800 	.word	0x40021800
 8003f54:	40021c00 	.word	0x40021c00
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e001      	b.n	8003f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f9c:	787b      	ldrb	r3, [r7, #1]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fa2:	887a      	ldrh	r2, [r7, #2]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fa8:	e003      	b.n	8003fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003faa:	887b      	ldrh	r3, [r7, #2]
 8003fac:	041a      	lsls	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	619a      	str	r2, [r3, #24]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e12b      	b.n	800422a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d106      	bne.n	8003fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fed8 	bl	8002d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2224      	movs	r2, #36	; 0x24
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004024:	f002 f870 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 8004028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4a81      	ldr	r2, [pc, #516]	; (8004234 <HAL_I2C_Init+0x274>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d807      	bhi.n	8004044 <HAL_I2C_Init+0x84>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a80      	ldr	r2, [pc, #512]	; (8004238 <HAL_I2C_Init+0x278>)
 8004038:	4293      	cmp	r3, r2
 800403a:	bf94      	ite	ls
 800403c:	2301      	movls	r3, #1
 800403e:	2300      	movhi	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e006      	b.n	8004052 <HAL_I2C_Init+0x92>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a7d      	ldr	r2, [pc, #500]	; (800423c <HAL_I2C_Init+0x27c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	bf94      	ite	ls
 800404c:	2301      	movls	r3, #1
 800404e:	2300      	movhi	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0e7      	b.n	800422a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a78      	ldr	r2, [pc, #480]	; (8004240 <HAL_I2C_Init+0x280>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	0c9b      	lsrs	r3, r3, #18
 8004064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a6a      	ldr	r2, [pc, #424]	; (8004234 <HAL_I2C_Init+0x274>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d802      	bhi.n	8004094 <HAL_I2C_Init+0xd4>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3301      	adds	r3, #1
 8004092:	e009      	b.n	80040a8 <HAL_I2C_Init+0xe8>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_I2C_Init+0x284>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	3301      	adds	r3, #1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	495c      	ldr	r1, [pc, #368]	; (8004234 <HAL_I2C_Init+0x274>)
 80040c4:	428b      	cmp	r3, r1
 80040c6:	d819      	bhi.n	80040fc <HAL_I2C_Init+0x13c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1e59      	subs	r1, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040d6:	1c59      	adds	r1, r3, #1
 80040d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040dc:	400b      	ands	r3, r1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_I2C_Init+0x138>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e59      	subs	r1, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f6:	e051      	b.n	800419c <HAL_I2C_Init+0x1dc>
 80040f8:	2304      	movs	r3, #4
 80040fa:	e04f      	b.n	800419c <HAL_I2C_Init+0x1dc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d111      	bne.n	8004128 <HAL_I2C_Init+0x168>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e58      	subs	r0, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e012      	b.n	800414e <HAL_I2C_Init+0x18e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	0099      	lsls	r1, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Init+0x196>
 8004152:	2301      	movs	r3, #1
 8004154:	e022      	b.n	800419c <HAL_I2C_Init+0x1dc>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10e      	bne.n	800417c <HAL_I2C_Init+0x1bc>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1e58      	subs	r0, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	440b      	add	r3, r1
 800416c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	e00f      	b.n	800419c <HAL_I2C_Init+0x1dc>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e58      	subs	r0, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	0099      	lsls	r1, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	6809      	ldr	r1, [r1, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6911      	ldr	r1, [r2, #16]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	4311      	orrs	r1, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	430b      	orrs	r3, r1
 80041de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	000186a0 	.word	0x000186a0
 8004238:	001e847f 	.word	0x001e847f
 800423c:	003d08ff 	.word	0x003d08ff
 8004240:	431bde83 	.word	0x431bde83
 8004244:	10624dd3 	.word	0x10624dd3

08004248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	461a      	mov	r2, r3
 8004254:	460b      	mov	r3, r1
 8004256:	817b      	strh	r3, [r7, #10]
 8004258:	4613      	mov	r3, r2
 800425a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7fe ffcc 	bl	80031f8 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	f040 80e0 	bne.w	8004430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2319      	movs	r3, #25
 8004276:	2201      	movs	r2, #1
 8004278:	4970      	ldr	r1, [pc, #448]	; (800443c <HAL_I2C_Master_Transmit+0x1f4>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f001 f8f6 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	e0d3      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_I2C_Master_Transmit+0x50>
 8004294:	2302      	movs	r3, #2
 8004296:	e0cc      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d007      	beq.n	80042be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2221      	movs	r2, #33	; 0x21
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2210      	movs	r2, #16
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	893a      	ldrh	r2, [r7, #8]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a50      	ldr	r2, [pc, #320]	; (8004440 <HAL_I2C_Master_Transmit+0x1f8>)
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004300:	8979      	ldrh	r1, [r7, #10]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fde2 	bl	8004ed0 <I2C_MasterRequestWrite>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e08d      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800432c:	e066      	b.n	80043fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f001 f970 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e06b      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11b      	bne.n	80043d0 <HAL_I2C_Master_Transmit+0x188>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d017      	beq.n	80043d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	6a39      	ldr	r1, [r7, #32]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f001 f960 	bl	800569a <I2C_WaitOnBTFFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d107      	bne.n	80043f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e01a      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d194      	bne.n	800432e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	00100002 	.word	0x00100002
 8004440:	ffff0000 	.word	0xffff0000

08004444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	; 0x30
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	461a      	mov	r2, r3
 8004450:	460b      	mov	r3, r1
 8004452:	817b      	strh	r3, [r7, #10]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7fe fece 	bl	80031f8 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b20      	cmp	r3, #32
 8004468:	f040 820b 	bne.w	8004882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2319      	movs	r3, #25
 8004472:	2201      	movs	r2, #1
 8004474:	497c      	ldr	r1, [pc, #496]	; (8004668 <HAL_I2C_Master_Receive+0x224>)
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fff8 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	e1fe      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2C_Master_Receive+0x50>
 8004490:	2302      	movs	r3, #2
 8004492:	e1f7      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d007      	beq.n	80044ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2222      	movs	r2, #34	; 0x22
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2210      	movs	r2, #16
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	893a      	ldrh	r2, [r7, #8]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a5c      	ldr	r2, [pc, #368]	; (800466c <HAL_I2C_Master_Receive+0x228>)
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fd66 	bl	8004fd4 <I2C_MasterRequestRead>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e1b8      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d113      	bne.n	8004542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e18c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11b      	bne.n	8004582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e16c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	2b02      	cmp	r3, #2
 8004588:	d11b      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	e14c      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045e8:	e138      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	f200 80f1 	bhi.w	80047d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d123      	bne.n	8004644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f001 f88b 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e139      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004642:	e10b      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	2b02      	cmp	r3, #2
 800464a:	d14e      	bne.n	80046ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2200      	movs	r2, #0
 8004654:	4906      	ldr	r1, [pc, #24]	; (8004670 <HAL_I2C_Master_Receive+0x22c>)
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 ff08 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e10e      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
 8004666:	bf00      	nop
 8004668:	00100002 	.word	0x00100002
 800466c:	ffff0000 	.word	0xffff0000
 8004670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e8:	e0b8      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2200      	movs	r2, #0
 80046f2:	4966      	ldr	r1, [pc, #408]	; (800488c <HAL_I2C_Master_Receive+0x448>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 feb9 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0bf      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	494f      	ldr	r1, [pc, #316]	; (800488c <HAL_I2C_Master_Receive+0x448>)
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fe8b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e091      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047d4:	e042      	b.n	800485c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 ff9e 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e04c      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d118      	bne.n	800485c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47f aec2 	bne.w	80045ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00010004 	.word	0x00010004

08004890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	460b      	mov	r3, r1
 80048a4:	813b      	strh	r3, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048aa:	f7fe fca5 	bl	80031f8 <HAL_GetTick>
 80048ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	f040 80d9 	bne.w	8004a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2319      	movs	r3, #25
 80048c4:	2201      	movs	r2, #1
 80048c6:	496d      	ldr	r1, [pc, #436]	; (8004a7c <HAL_I2C_Mem_Write+0x1ec>)
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fdcf 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048d4:	2302      	movs	r3, #2
 80048d6:	e0cc      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2C_Mem_Write+0x56>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e0c5      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d007      	beq.n	800490c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2221      	movs	r2, #33	; 0x21
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a4d      	ldr	r2, [pc, #308]	; (8004a80 <HAL_I2C_Mem_Write+0x1f0>)
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800494e:	88f8      	ldrh	r0, [r7, #6]
 8004950:	893a      	ldrh	r2, [r7, #8]
 8004952:	8979      	ldrh	r1, [r7, #10]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4603      	mov	r3, r0
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fc06 	bl	8005170 <I2C_RequestMemoryWrite>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d052      	beq.n	8004a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e081      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fe50 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b04      	cmp	r3, #4
 8004984:	d107      	bne.n	8004996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d11b      	bne.n	8004a10 <HAL_I2C_Mem_Write+0x180>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d017      	beq.n	8004a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1aa      	bne.n	800496e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fe3c 	bl	800569a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00d      	beq.n	8004a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d107      	bne.n	8004a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e016      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	00100002 	.word	0x00100002
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a9e:	f7fe fbab 	bl	80031f8 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	f040 8208 	bne.w	8004ec2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2319      	movs	r3, #25
 8004ab8:	2201      	movs	r2, #1
 8004aba:	497b      	ldr	r1, [pc, #492]	; (8004ca8 <HAL_I2C_Mem_Read+0x224>)
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fcd5 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e1fb      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_I2C_Mem_Read+0x56>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e1f4      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d007      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2222      	movs	r2, #34	; 0x22
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2240      	movs	r2, #64	; 0x40
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	; (8004cac <HAL_I2C_Mem_Read+0x228>)
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b42:	88f8      	ldrh	r0, [r7, #6]
 8004b44:	893a      	ldrh	r2, [r7, #8]
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4603      	mov	r3, r0
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fba2 	bl	800529c <I2C_RequestMemoryRead>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1b0      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	623b      	str	r3, [r7, #32]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	623b      	str	r3, [r7, #32]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	e184      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d11b      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e164      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d11b      	bne.n	8004c12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	e144      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c28:	e138      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	f200 80f1 	bhi.w	8004e16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d123      	bne.n	8004c84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 fd6b 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e139      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c82:	e10b      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d14e      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	2200      	movs	r2, #0
 8004c94:	4906      	ldr	r1, [pc, #24]	; (8004cb0 <HAL_I2C_Mem_Read+0x22c>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fbe8 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d008      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e10e      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
 8004ca6:	bf00      	nop
 8004ca8:	00100002 	.word	0x00100002
 8004cac:	ffff0000 	.word	0xffff0000
 8004cb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d28:	e0b8      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2200      	movs	r2, #0
 8004d32:	4966      	ldr	r1, [pc, #408]	; (8004ecc <HAL_I2C_Mem_Read+0x448>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fb99 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0bf      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	494f      	ldr	r1, [pc, #316]	; (8004ecc <HAL_I2C_Mem_Read+0x448>)
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fb6b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e091      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e14:	e042      	b.n	8004e9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fc7e 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e04c      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d118      	bne.n	8004e9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f47f aec2 	bne.w	8004c2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3728      	adds	r7, #40	; 0x28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00010004 	.word	0x00010004

08004ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	460b      	mov	r3, r1
 8004ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d006      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d003      	beq.n	8004efa <I2C_MasterRequestWrite+0x2a>
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef8:	d108      	bne.n	8004f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e00b      	b.n	8004f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	2b12      	cmp	r3, #18
 8004f12:	d107      	bne.n	8004f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fa9b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d103      	bne.n	8004f54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e035      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d108      	bne.n	8004f74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f62:	897b      	ldrh	r3, [r7, #10]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f70:	611a      	str	r2, [r3, #16]
 8004f72:	e01b      	b.n	8004fac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f74:	897b      	ldrh	r3, [r7, #10]
 8004f76:	11db      	asrs	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f063 030f 	orn	r3, r3, #15
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <I2C_MasterRequestWrite+0xfc>)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fac1 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e010      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4907      	ldr	r1, [pc, #28]	; (8004fd0 <I2C_MasterRequestWrite+0x100>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fab1 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	00010008 	.word	0x00010008
 8004fd0:	00010002 	.word	0x00010002

08004fd4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d006      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d003      	beq.n	800500e <I2C_MasterRequestRead+0x3a>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800500c:	d108      	bne.n	8005020 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e00b      	b.n	8005038 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	2b11      	cmp	r3, #17
 8005026:	d107      	bne.n	8005038 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fa11 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505e:	d103      	bne.n	8005068 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e079      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005076:	897b      	ldrh	r3, [r7, #10]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	611a      	str	r2, [r3, #16]
 8005086:	e05f      	b.n	8005148 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005088:	897b      	ldrh	r3, [r7, #10]
 800508a:	11db      	asrs	r3, r3, #7
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f063 030f 	orn	r3, r3, #15
 8005098:	b2da      	uxtb	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4930      	ldr	r1, [pc, #192]	; (8005168 <I2C_MasterRequestRead+0x194>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa37 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e054      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4929      	ldr	r1, [pc, #164]	; (800516c <I2C_MasterRequestRead+0x198>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa27 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e044      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f9af 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d103      	bne.n	800512c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e017      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005130:	897b      	ldrh	r3, [r7, #10]
 8005132:	11db      	asrs	r3, r3, #7
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	b2db      	uxtb	r3, r3
 800513c:	f063 030e 	orn	r3, r3, #14
 8005140:	b2da      	uxtb	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <I2C_MasterRequestRead+0x198>)
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f9e3 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	00010008 	.word	0x00010008
 800516c:	00010002 	.word	0x00010002

08005170 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f960 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d103      	bne.n	80051ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e05f      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	492d      	ldr	r1, [pc, #180]	; (8005298 <I2C_RequestMemoryWrite+0x128>)
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f998 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e04c      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fa02 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e02b      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	e021      	b.n	800528c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b29b      	uxth	r3, r3
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f9dc 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800527c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e005      	b.n	800528e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	00010002 	.word	0x00010002

0800529c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8c2 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d103      	bne.n	8005306 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0aa      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	4952      	ldr	r1, [pc, #328]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f8fa 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e097      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f964 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e076      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e021      	b.n	80053c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f93e 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e050      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f923 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e035      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2200      	movs	r2, #0
 800540c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f82b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d103      	bne.n	8005434 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e013      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	4906      	ldr	r1, [pc, #24]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f863 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	00010002 	.word	0x00010002

0800546c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547c:	e025      	b.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d021      	beq.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fd feb7 	bl	80031f8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d116      	bne.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e023      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10d      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	e00c      	b.n	800550a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d0b6      	beq.n	800547e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005528:	e051      	b.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d123      	bne.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e046      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd fe35 	bl	80031f8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e020      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10c      	bne.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e00b      	b.n	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	43da      	mvns	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d18d      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005624:	e02d      	b.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8ce 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e02d      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d021      	beq.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fd fddb 	bl	80031f8 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d1ca      	bne.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a6:	e02d      	b.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f88d 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e02d      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d021      	beq.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7fd fd9a 	bl	80031f8 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e007      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d1ca      	bne.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005728:	e042      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d119      	bne.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e029      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fd fd44 	bl	80031f8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e007      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d1b5      	bne.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d11b      	bne.n	8005818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e267      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d075      	beq.n	8005932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005846:	4b88      	ldr	r3, [pc, #544]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b04      	cmp	r3, #4
 8005850:	d00c      	beq.n	800586c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005852:	4b85      	ldr	r3, [pc, #532]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800585a:	2b08      	cmp	r3, #8
 800585c:	d112      	bne.n	8005884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800585e:	4b82      	ldr	r3, [pc, #520]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586a:	d10b      	bne.n	8005884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	4b7e      	ldr	r3, [pc, #504]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05b      	beq.n	8005930 <HAL_RCC_OscConfig+0x108>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d157      	bne.n	8005930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e242      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d106      	bne.n	800589c <HAL_RCC_OscConfig+0x74>
 800588e:	4b76      	ldr	r3, [pc, #472]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a75      	ldr	r2, [pc, #468]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e01d      	b.n	80058d8 <HAL_RCC_OscConfig+0xb0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x98>
 80058a6:	4b70      	ldr	r3, [pc, #448]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a6f      	ldr	r2, [pc, #444]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	4b6d      	ldr	r3, [pc, #436]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a6c      	ldr	r2, [pc, #432]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e00b      	b.n	80058d8 <HAL_RCC_OscConfig+0xb0>
 80058c0:	4b69      	ldr	r3, [pc, #420]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a68      	ldr	r2, [pc, #416]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	4b66      	ldr	r3, [pc, #408]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a65      	ldr	r2, [pc, #404]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d013      	beq.n	8005908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd fc8a 	bl	80031f8 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fd fc86 	bl	80031f8 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e207      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fa:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0xc0>
 8005906:	e014      	b.n	8005932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005908:	f7fd fc76 	bl	80031f8 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005910:	f7fd fc72 	bl	80031f8 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b64      	cmp	r3, #100	; 0x64
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1f3      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005922:	4b51      	ldr	r3, [pc, #324]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0xe8>
 800592e:	e000      	b.n	8005932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d063      	beq.n	8005a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005952:	2b08      	cmp	r3, #8
 8005954:	d11c      	bne.n	8005990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005956:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d116      	bne.n	8005990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_RCC_OscConfig+0x152>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d001      	beq.n	800597a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e1c7      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	4937      	ldr	r1, [pc, #220]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800598e:	e03a      	b.n	8005a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d020      	beq.n	80059da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005998:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <HAL_RCC_OscConfig+0x244>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599e:	f7fd fc2b 	bl	80031f8 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059a6:	f7fd fc27 	bl	80031f8 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e1a8      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b8:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4925      	ldr	r1, [pc, #148]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]
 80059d8:	e015      	b.n	8005a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <HAL_RCC_OscConfig+0x244>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fd fc0a 	bl	80031f8 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e8:	f7fd fc06 	bl	80031f8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e187      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d036      	beq.n	8005a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <HAL_RCC_OscConfig+0x248>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a20:	f7fd fbea 	bl	80031f8 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a28:	f7fd fbe6 	bl	80031f8 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e167      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0x200>
 8005a46:	e01b      	b.n	8005a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_OscConfig+0x248>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fbd3 	bl	80031f8 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a54:	e00e      	b.n	8005a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a56:	f7fd fbcf 	bl	80031f8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d907      	bls.n	8005a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e150      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	42470000 	.word	0x42470000
 8005a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a74:	4b88      	ldr	r3, [pc, #544]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ea      	bne.n	8005a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8097 	beq.w	8005bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a92:	4b81      	ldr	r3, [pc, #516]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	4b7d      	ldr	r3, [pc, #500]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4a7c      	ldr	r2, [pc, #496]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6413      	str	r3, [r2, #64]	; 0x40
 8005aae:	4b7a      	ldr	r3, [pc, #488]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abe:	4b77      	ldr	r3, [pc, #476]	; (8005c9c <HAL_RCC_OscConfig+0x474>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d118      	bne.n	8005afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aca:	4b74      	ldr	r3, [pc, #464]	; (8005c9c <HAL_RCC_OscConfig+0x474>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a73      	ldr	r2, [pc, #460]	; (8005c9c <HAL_RCC_OscConfig+0x474>)
 8005ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ad6:	f7fd fb8f 	bl	80031f8 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ade:	f7fd fb8b 	bl	80031f8 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e10c      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af0:	4b6a      	ldr	r3, [pc, #424]	; (8005c9c <HAL_RCC_OscConfig+0x474>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f0      	beq.n	8005ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d106      	bne.n	8005b12 <HAL_RCC_OscConfig+0x2ea>
 8005b04:	4b64      	ldr	r3, [pc, #400]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a63      	ldr	r2, [pc, #396]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b10:	e01c      	b.n	8005b4c <HAL_RCC_OscConfig+0x324>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x30c>
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a5e      	ldr	r2, [pc, #376]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	6713      	str	r3, [r2, #112]	; 0x70
 8005b26:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	4a5b      	ldr	r2, [pc, #364]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70
 8005b32:	e00b      	b.n	8005b4c <HAL_RCC_OscConfig+0x324>
 8005b34:	4b58      	ldr	r3, [pc, #352]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a57      	ldr	r2, [pc, #348]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	4a54      	ldr	r2, [pc, #336]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b46:	f023 0304 	bic.w	r3, r3, #4
 8005b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d015      	beq.n	8005b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fd fb50 	bl	80031f8 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5c:	f7fd fb4c 	bl	80031f8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e0cb      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b72:	4b49      	ldr	r3, [pc, #292]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ee      	beq.n	8005b5c <HAL_RCC_OscConfig+0x334>
 8005b7e:	e014      	b.n	8005baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b80:	f7fd fb3a 	bl	80031f8 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b86:	e00a      	b.n	8005b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b88:	f7fd fb36 	bl	80031f8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0b5      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9e:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb0:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	4a38      	ldr	r2, [pc, #224]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a1 	beq.w	8005d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bc6:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d05c      	beq.n	8005c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d141      	bne.n	8005c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b31      	ldr	r3, [pc, #196]	; (8005ca0 <HAL_RCC_OscConfig+0x478>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be0:	f7fd fb0a 	bl	80031f8 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fd fb06 	bl	80031f8 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e087      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfa:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f0      	bne.n	8005be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	491b      	ldr	r1, [pc, #108]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c30:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <HAL_RCC_OscConfig+0x478>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fd fadf 	bl	80031f8 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3e:	f7fd fadb 	bl	80031f8 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e05c      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x416>
 8005c5c:	e054      	b.n	8005d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5e:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCC_OscConfig+0x478>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fd fac8 	bl	80031f8 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6c:	f7fd fac4 	bl	80031f8 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e045      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCC_OscConfig+0x470>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f0      	bne.n	8005c6c <HAL_RCC_OscConfig+0x444>
 8005c8a:	e03d      	b.n	8005d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e038      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <HAL_RCC_OscConfig+0x4ec>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d028      	beq.n	8005d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d121      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d11a      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d111      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	3b01      	subs	r3, #1
 8005cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800

08005d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0cc      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b68      	ldr	r3, [pc, #416]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d90c      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b65      	ldr	r3, [pc, #404]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b63      	ldr	r3, [pc, #396]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0b8      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d020      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d6c:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a58      	ldr	r2, [pc, #352]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d84:	4b53      	ldr	r3, [pc, #332]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d90:	4b50      	ldr	r3, [pc, #320]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	494d      	ldr	r1, [pc, #308]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d044      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d119      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e07f      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d003      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd6:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e06f      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de6:	4b3b      	ldr	r3, [pc, #236]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e067      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f023 0203 	bic.w	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4934      	ldr	r1, [pc, #208]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e08:	f7fd f9f6 	bl	80031f8 <HAL_GetTick>
 8005e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0e:	e00a      	b.n	8005e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e10:	f7fd f9f2 	bl	80031f8 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e04f      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 020c 	and.w	r2, r3, #12
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d1eb      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d20c      	bcs.n	8005e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e46:	4b22      	ldr	r3, [pc, #136]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e032      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e6c:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4916      	ldr	r1, [pc, #88]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	490e      	ldr	r1, [pc, #56]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e9e:	f000 f821 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	490a      	ldr	r1, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb0:	5ccb      	ldrb	r3, [r1, r3]
 8005eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd f956 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023c00 	.word	0x40023c00
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	08006e38 	.word	0x08006e38
 8005edc:	20000008 	.word	0x20000008
 8005ee0:	2000000c 	.word	0x2000000c

08005ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee8:	b094      	sub	sp, #80	; 0x50
 8005eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efc:	4b79      	ldr	r3, [pc, #484]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d00d      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x40>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	f200 80e1 	bhi.w	80060d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x34>
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d003      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f16:	e0db      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f18:	4b73      	ldr	r3, [pc, #460]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f1c:	e0db      	b.n	80060d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f1e:	4b73      	ldr	r3, [pc, #460]	; (80060ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f22:	e0d8      	b.n	80060d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f24:	4b6f      	ldr	r3, [pc, #444]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d063      	beq.n	8006002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3a:	4b6a      	ldr	r3, [pc, #424]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	2200      	movs	r2, #0
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4e:	2300      	movs	r3, #0
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
 8005f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	0159      	lsls	r1, r3, #5
 8005f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f68:	0150      	lsls	r0, r2, #5
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4621      	mov	r1, r4
 8005f70:	1a51      	subs	r1, r2, r1
 8005f72:	6139      	str	r1, [r7, #16]
 8005f74:	4629      	mov	r1, r5
 8005f76:	eb63 0301 	sbc.w	r3, r3, r1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f88:	4659      	mov	r1, fp
 8005f8a:	018b      	lsls	r3, r1, #6
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f92:	4651      	mov	r1, sl
 8005f94:	018a      	lsls	r2, r1, #6
 8005f96:	4651      	mov	r1, sl
 8005f98:	ebb2 0801 	subs.w	r8, r2, r1
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb6:	4690      	mov	r8, r2
 8005fb8:	4699      	mov	r9, r3
 8005fba:	4623      	mov	r3, r4
 8005fbc:	eb18 0303 	adds.w	r3, r8, r3
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	eb49 0303 	adc.w	r3, r9, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	024b      	lsls	r3, r1, #9
 8005fda:	4621      	mov	r1, r4
 8005fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	024a      	lsls	r2, r1, #9
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fea:	2200      	movs	r2, #0
 8005fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ff4:	f7fa fd2e 	bl	8000a54 <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	e058      	b.n	80060b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006002:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	2200      	movs	r2, #0
 800600a:	4618      	mov	r0, r3
 800600c:	4611      	mov	r1, r2
 800600e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006012:	623b      	str	r3, [r7, #32]
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
 8006018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	f04f 0000 	mov.w	r0, #0
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	0159      	lsls	r1, r3, #5
 800602a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800602e:	0150      	lsls	r0, r2, #5
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4641      	mov	r1, r8
 8006036:	ebb2 0a01 	subs.w	sl, r2, r1
 800603a:	4649      	mov	r1, r9
 800603c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800604c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006054:	ebb2 040a 	subs.w	r4, r2, sl
 8006058:	eb63 050b 	sbc.w	r5, r3, fp
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	00eb      	lsls	r3, r5, #3
 8006066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606a:	00e2      	lsls	r2, r4, #3
 800606c:	4614      	mov	r4, r2
 800606e:	461d      	mov	r5, r3
 8006070:	4643      	mov	r3, r8
 8006072:	18e3      	adds	r3, r4, r3
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	464b      	mov	r3, r9
 8006078:	eb45 0303 	adc.w	r3, r5, r3
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800608a:	4629      	mov	r1, r5
 800608c:	028b      	lsls	r3, r1, #10
 800608e:	4621      	mov	r1, r4
 8006090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006094:	4621      	mov	r1, r4
 8006096:	028a      	lsls	r2, r1, #10
 8006098:	4610      	mov	r0, r2
 800609a:	4619      	mov	r1, r3
 800609c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800609e:	2200      	movs	r2, #0
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	61fa      	str	r2, [r7, #28]
 80060a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a8:	f7fa fcd4 	bl	8000a54 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4613      	mov	r3, r2
 80060b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	3301      	adds	r3, #1
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060ce:	e002      	b.n	80060d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80060d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3750      	adds	r7, #80	; 0x50
 80060dc:	46bd      	mov	sp, r7
 80060de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e2:	bf00      	nop
 80060e4:	40023800 	.word	0x40023800
 80060e8:	00f42400 	.word	0x00f42400
 80060ec:	007a1200 	.word	0x007a1200

080060f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060f4:	4b03      	ldr	r3, [pc, #12]	; (8006104 <HAL_RCC_GetHCLKFreq+0x14>)
 80060f6:	681b      	ldr	r3, [r3, #0]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000008 	.word	0x20000008

08006108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800610c:	f7ff fff0 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0a9b      	lsrs	r3, r3, #10
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	4903      	ldr	r1, [pc, #12]	; (800612c <HAL_RCC_GetPCLK1Freq+0x24>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	08006e48 	.word	0x08006e48

08006130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006134:	f7ff ffdc 	bl	80060f0 <HAL_RCC_GetHCLKFreq>
 8006138:	4602      	mov	r2, r0
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	0b5b      	lsrs	r3, r3, #13
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	4903      	ldr	r1, [pc, #12]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006146:	5ccb      	ldrb	r3, [r1, r3]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800614c:	4618      	mov	r0, r3
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40023800 	.word	0x40023800
 8006154:	08006e48 	.word	0x08006e48

08006158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e041      	b.n	80061ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc fee0 	bl	8002f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f000 f896 	bl	80062c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d001      	beq.n	8006210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e046      	b.n	800629e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a23      	ldr	r2, [pc, #140]	; (80062ac <HAL_TIM_Base_Start+0xb4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d022      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d01d      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <HAL_TIM_Base_Start+0xb8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1e      	ldr	r2, [pc, #120]	; (80062b4 <HAL_TIM_Base_Start+0xbc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <HAL_TIM_Base_Start+0xc0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1b      	ldr	r2, [pc, #108]	; (80062bc <HAL_TIM_Base_Start+0xc4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_TIM_Base_Start+0xc8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIM_Base_Start+0x70>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <HAL_TIM_Base_Start+0xcc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d111      	bne.n	800628c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b06      	cmp	r3, #6
 8006278:	d010      	beq.n	800629c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	e007      	b.n	800629c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40001800 	.word	0x40001800

080062c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a40      	ldr	r2, [pc, #256]	; (80063dc <TIM_Base_SetConfig+0x114>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <TIM_Base_SetConfig+0x40>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e6:	d00f      	beq.n	8006308 <TIM_Base_SetConfig+0x40>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a3d      	ldr	r2, [pc, #244]	; (80063e0 <TIM_Base_SetConfig+0x118>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_Base_SetConfig+0x40>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a3c      	ldr	r2, [pc, #240]	; (80063e4 <TIM_Base_SetConfig+0x11c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_Base_SetConfig+0x40>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a3b      	ldr	r2, [pc, #236]	; (80063e8 <TIM_Base_SetConfig+0x120>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0x40>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3a      	ldr	r2, [pc, #232]	; (80063ec <TIM_Base_SetConfig+0x124>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <TIM_Base_SetConfig+0x114>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d02b      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d027      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2c      	ldr	r2, [pc, #176]	; (80063e0 <TIM_Base_SetConfig+0x118>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d023      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2b      	ldr	r2, [pc, #172]	; (80063e4 <TIM_Base_SetConfig+0x11c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01f      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <TIM_Base_SetConfig+0x120>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01b      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a29      	ldr	r2, [pc, #164]	; (80063ec <TIM_Base_SetConfig+0x124>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d017      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <TIM_Base_SetConfig+0x128>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a27      	ldr	r2, [pc, #156]	; (80063f4 <TIM_Base_SetConfig+0x12c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00f      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a26      	ldr	r2, [pc, #152]	; (80063f8 <TIM_Base_SetConfig+0x130>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00b      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a25      	ldr	r2, [pc, #148]	; (80063fc <TIM_Base_SetConfig+0x134>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a24      	ldr	r2, [pc, #144]	; (8006400 <TIM_Base_SetConfig+0x138>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a23      	ldr	r2, [pc, #140]	; (8006404 <TIM_Base_SetConfig+0x13c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d108      	bne.n	800638c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a0a      	ldr	r2, [pc, #40]	; (80063dc <TIM_Base_SetConfig+0x114>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_Base_SetConfig+0xf8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <TIM_Base_SetConfig+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d103      	bne.n	80063c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	615a      	str	r2, [r3, #20]
}
 80063ce:	bf00      	nop
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40010000 	.word	0x40010000
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800
 80063fc:	40001800 	.word	0x40001800
 8006400:	40001c00 	.word	0x40001c00
 8006404:	40002000 	.word	0x40002000

08006408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e05a      	b.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646c:	d01d      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10c      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40000c00 	.word	0x40000c00
 80064f4:	40010400 	.word	0x40010400
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40001800 	.word	0x40001800

08006500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e03f      	b.n	8006592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fc fd2e 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	; 0x24
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9cb 	bl	80068e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b08a      	sub	sp, #40	; 0x28
 800659e:	af02      	add	r7, sp, #8
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d17c      	bne.n	80066b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_UART_Transmit+0x2c>
 80065c0:	88fb      	ldrh	r3, [r7, #6]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e075      	b.n	80066b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Transmit+0x3e>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e06e      	b.n	80066b6 <HAL_UART_Transmit+0x11c>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2221      	movs	r2, #33	; 0x21
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ee:	f7fc fe03 	bl	80031f8 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006608:	d108      	bne.n	800661c <HAL_UART_Transmit+0x82>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	e003      	b.n	8006624 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800662c:	e02a      	b.n	8006684 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2200      	movs	r2, #0
 8006636:	2180      	movs	r1, #128	; 0x80
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f8e2 	bl	8006802 <UART_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e036      	b.n	80066b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10b      	bne.n	8006666 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800665c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	3302      	adds	r3, #2
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e007      	b.n	8006676 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	3301      	adds	r3, #1
 8006674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1cf      	bne.n	800662e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2200      	movs	r2, #0
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f8b2 	bl	8006802 <UART_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e006      	b.n	80066b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	; 0x28
 80066c2:	af02      	add	r7, sp, #8
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b20      	cmp	r3, #32
 80066dc:	f040 808c 	bne.w	80067f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_UART_Receive+0x2e>
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e084      	b.n	80067fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_UART_Receive+0x40>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e07d      	b.n	80067fa <HAL_UART_Receive+0x13c>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2222      	movs	r2, #34	; 0x22
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800671a:	f7fc fd6d 	bl	80031f8 <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d108      	bne.n	8006748 <HAL_UART_Receive+0x8a>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e003      	b.n	8006750 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006758:	e043      	b.n	80067e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2200      	movs	r2, #0
 8006762:	2120      	movs	r1, #32
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f84c 	bl	8006802 <UART_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e042      	b.n	80067fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006786:	b29a      	uxth	r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	3302      	adds	r3, #2
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	e01f      	b.n	80067d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d007      	beq.n	80067ae <HAL_UART_Receive+0xf0>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10a      	bne.n	80067bc <HAL_UART_Receive+0xfe>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e008      	b.n	80067ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1b6      	bne.n	800675a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e000      	b.n	80067fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b090      	sub	sp, #64	; 0x40
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006812:	e050      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d04c      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800681c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681e:	2b00      	cmp	r3, #0
 8006820:	d007      	beq.n	8006832 <UART_WaitOnFlagUntilTimeout+0x30>
 8006822:	f7fc fce9 	bl	80031f8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682e:	429a      	cmp	r2, r3
 8006830:	d241      	bcs.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006852:	637a      	str	r2, [r7, #52]	; 0x34
 8006854:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	613b      	str	r3, [r7, #16]
   return(result);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	63bb      	str	r3, [r7, #56]	; 0x38
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006886:	623a      	str	r2, [r7, #32]
 8006888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	69f9      	ldr	r1, [r7, #28]
 800688c:	6a3a      	ldr	r2, [r7, #32]
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	61bb      	str	r3, [r7, #24]
   return(result);
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d09f      	beq.n	8006814 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3740      	adds	r7, #64	; 0x40
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e4:	b0c0      	sub	sp, #256	; 0x100
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	68d9      	ldr	r1, [r3, #12]
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	ea40 0301 	orr.w	r3, r0, r1
 8006908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	431a      	orrs	r2, r3
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	431a      	orrs	r2, r3
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006938:	f021 010c 	bic.w	r1, r1, #12
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006946:	430b      	orrs	r3, r1
 8006948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695a:	6999      	ldr	r1, [r3, #24]
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	ea40 0301 	orr.w	r3, r0, r1
 8006966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b8f      	ldr	r3, [pc, #572]	; (8006bac <UART_SetConfig+0x2cc>)
 8006970:	429a      	cmp	r2, r3
 8006972:	d005      	beq.n	8006980 <UART_SetConfig+0xa0>
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4b8d      	ldr	r3, [pc, #564]	; (8006bb0 <UART_SetConfig+0x2d0>)
 800697c:	429a      	cmp	r2, r3
 800697e:	d104      	bne.n	800698a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006980:	f7ff fbd6 	bl	8006130 <HAL_RCC_GetPCLK2Freq>
 8006984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006988:	e003      	b.n	8006992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800698a:	f7ff fbbd 	bl	8006108 <HAL_RCC_GetPCLK1Freq>
 800698e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699c:	f040 810c 	bne.w	8006bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069b2:	4622      	mov	r2, r4
 80069b4:	462b      	mov	r3, r5
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80069ba:	415b      	adcs	r3, r3
 80069bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069c2:	4621      	mov	r1, r4
 80069c4:	eb12 0801 	adds.w	r8, r2, r1
 80069c8:	4629      	mov	r1, r5
 80069ca:	eb43 0901 	adc.w	r9, r3, r1
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069e2:	4690      	mov	r8, r2
 80069e4:	4699      	mov	r9, r3
 80069e6:	4623      	mov	r3, r4
 80069e8:	eb18 0303 	adds.w	r3, r8, r3
 80069ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069f0:	462b      	mov	r3, r5
 80069f2:	eb49 0303 	adc.w	r3, r9, r3
 80069f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a0e:	460b      	mov	r3, r1
 8006a10:	18db      	adds	r3, r3, r3
 8006a12:	653b      	str	r3, [r7, #80]	; 0x50
 8006a14:	4613      	mov	r3, r2
 8006a16:	eb42 0303 	adc.w	r3, r2, r3
 8006a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a24:	f7fa f816 	bl	8000a54 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4b61      	ldr	r3, [pc, #388]	; (8006bb4 <UART_SetConfig+0x2d4>)
 8006a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	011c      	lsls	r4, r3, #4
 8006a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	1891      	adds	r1, r2, r2
 8006a4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a50:	415b      	adcs	r3, r3
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a58:	4641      	mov	r1, r8
 8006a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a5e:	4649      	mov	r1, r9
 8006a60:	eb43 0b01 	adc.w	fp, r3, r1
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a78:	4692      	mov	sl, r2
 8006a7a:	469b      	mov	fp, r3
 8006a7c:	4643      	mov	r3, r8
 8006a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a86:	464b      	mov	r3, r9
 8006a88:	eb4b 0303 	adc.w	r3, fp, r3
 8006a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	18db      	adds	r3, r3, r3
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aaa:	4613      	mov	r3, r2
 8006aac:	eb42 0303 	adc.w	r3, r2, r3
 8006ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006aba:	f7f9 ffcb 	bl	8000a54 <__aeabi_uldivmod>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <UART_SetConfig+0x2d4>)
 8006ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	2264      	movs	r2, #100	; 0x64
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	1acb      	subs	r3, r1, r3
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ada:	4b36      	ldr	r3, [pc, #216]	; (8006bb4 <UART_SetConfig+0x2d4>)
 8006adc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ae8:	441c      	add	r4, r3
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	1891      	adds	r1, r2, r2
 8006b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b04:	415b      	adcs	r3, r3
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	1851      	adds	r1, r2, r1
 8006b10:	6339      	str	r1, [r7, #48]	; 0x30
 8006b12:	4649      	mov	r1, r9
 8006b14:	414b      	adcs	r3, r1
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b24:	4659      	mov	r1, fp
 8006b26:	00cb      	lsls	r3, r1, #3
 8006b28:	4651      	mov	r1, sl
 8006b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b2e:	4651      	mov	r1, sl
 8006b30:	00ca      	lsls	r2, r1, #3
 8006b32:	4610      	mov	r0, r2
 8006b34:	4619      	mov	r1, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	4642      	mov	r2, r8
 8006b3a:	189b      	adds	r3, r3, r2
 8006b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b40:	464b      	mov	r3, r9
 8006b42:	460a      	mov	r2, r1
 8006b44:	eb42 0303 	adc.w	r3, r2, r3
 8006b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b60:	460b      	mov	r3, r1
 8006b62:	18db      	adds	r3, r3, r3
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b66:	4613      	mov	r3, r2
 8006b68:	eb42 0303 	adc.w	r3, r2, r3
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b76:	f7f9 ff6d 	bl	8000a54 <__aeabi_uldivmod>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <UART_SetConfig+0x2d4>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	3332      	adds	r3, #50	; 0x32
 8006b92:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <UART_SetConfig+0x2d4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 0207 	and.w	r2, r3, #7
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4422      	add	r2, r4
 8006ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ba8:	e105      	b.n	8006db6 <UART_SetConfig+0x4d6>
 8006baa:	bf00      	nop
 8006bac:	40011000 	.word	0x40011000
 8006bb0:	40011400 	.word	0x40011400
 8006bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bca:	4642      	mov	r2, r8
 8006bcc:	464b      	mov	r3, r9
 8006bce:	1891      	adds	r1, r2, r2
 8006bd0:	6239      	str	r1, [r7, #32]
 8006bd2:	415b      	adcs	r3, r3
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bda:	4641      	mov	r1, r8
 8006bdc:	1854      	adds	r4, r2, r1
 8006bde:	4649      	mov	r1, r9
 8006be0:	eb43 0501 	adc.w	r5, r3, r1
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	00eb      	lsls	r3, r5, #3
 8006bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bf2:	00e2      	lsls	r2, r4, #3
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	4643      	mov	r3, r8
 8006bfa:	18e3      	adds	r3, r4, r3
 8006bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c00:	464b      	mov	r3, r9
 8006c02:	eb45 0303 	adc.w	r3, r5, r3
 8006c06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c26:	4629      	mov	r1, r5
 8006c28:	008b      	lsls	r3, r1, #2
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c30:	4621      	mov	r1, r4
 8006c32:	008a      	lsls	r2, r1, #2
 8006c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c38:	f7f9 ff0c 	bl	8000a54 <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4b60      	ldr	r3, [pc, #384]	; (8006dc4 <UART_SetConfig+0x4e4>)
 8006c42:	fba3 2302 	umull	r2, r3, r3, r2
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	011c      	lsls	r4, r3, #4
 8006c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	1891      	adds	r1, r2, r2
 8006c62:	61b9      	str	r1, [r7, #24]
 8006c64:	415b      	adcs	r3, r3
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	1851      	adds	r1, r2, r1
 8006c70:	6139      	str	r1, [r7, #16]
 8006c72:	4649      	mov	r1, r9
 8006c74:	414b      	adcs	r3, r1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c84:	4659      	mov	r1, fp
 8006c86:	00cb      	lsls	r3, r1, #3
 8006c88:	4651      	mov	r1, sl
 8006c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c8e:	4651      	mov	r1, sl
 8006c90:	00ca      	lsls	r2, r1, #3
 8006c92:	4610      	mov	r0, r2
 8006c94:	4619      	mov	r1, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	4642      	mov	r2, r8
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	eb42 0303 	adc.w	r3, r2, r3
 8006ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	008b      	lsls	r3, r1, #2
 8006cc8:	4641      	mov	r1, r8
 8006cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cce:	4641      	mov	r1, r8
 8006cd0:	008a      	lsls	r2, r1, #2
 8006cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cd6:	f7f9 febd 	bl	8000a54 <__aeabi_uldivmod>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <UART_SetConfig+0x4e4>)
 8006ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	2164      	movs	r1, #100	; 0x64
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	3332      	adds	r3, #50	; 0x32
 8006cf2:	4a34      	ldr	r2, [pc, #208]	; (8006dc4 <UART_SetConfig+0x4e4>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cfe:	441c      	add	r4, r3
 8006d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d04:	2200      	movs	r2, #0
 8006d06:	673b      	str	r3, [r7, #112]	; 0x70
 8006d08:	677a      	str	r2, [r7, #116]	; 0x74
 8006d0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d0e:	4642      	mov	r2, r8
 8006d10:	464b      	mov	r3, r9
 8006d12:	1891      	adds	r1, r2, r2
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	415b      	adcs	r3, r3
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d1e:	4641      	mov	r1, r8
 8006d20:	1851      	adds	r1, r2, r1
 8006d22:	6039      	str	r1, [r7, #0]
 8006d24:	4649      	mov	r1, r9
 8006d26:	414b      	adcs	r3, r1
 8006d28:	607b      	str	r3, [r7, #4]
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d36:	4659      	mov	r1, fp
 8006d38:	00cb      	lsls	r3, r1, #3
 8006d3a:	4651      	mov	r1, sl
 8006d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d40:	4651      	mov	r1, sl
 8006d42:	00ca      	lsls	r2, r1, #3
 8006d44:	4610      	mov	r0, r2
 8006d46:	4619      	mov	r1, r3
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4642      	mov	r2, r8
 8006d4c:	189b      	adds	r3, r3, r2
 8006d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d50:	464b      	mov	r3, r9
 8006d52:	460a      	mov	r2, r1
 8006d54:	eb42 0303 	adc.w	r3, r2, r3
 8006d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	663b      	str	r3, [r7, #96]	; 0x60
 8006d64:	667a      	str	r2, [r7, #100]	; 0x64
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d72:	4649      	mov	r1, r9
 8006d74:	008b      	lsls	r3, r1, #2
 8006d76:	4641      	mov	r1, r8
 8006d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	008a      	lsls	r2, r1, #2
 8006d80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d84:	f7f9 fe66 	bl	8000a54 <__aeabi_uldivmod>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <UART_SetConfig+0x4e4>)
 8006d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d92:	095b      	lsrs	r3, r3, #5
 8006d94:	2164      	movs	r1, #100	; 0x64
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	011b      	lsls	r3, r3, #4
 8006d9e:	3332      	adds	r3, #50	; 0x32
 8006da0:	4a08      	ldr	r2, [pc, #32]	; (8006dc4 <UART_SetConfig+0x4e4>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	f003 020f 	and.w	r2, r3, #15
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4422      	add	r2, r4
 8006db4:	609a      	str	r2, [r3, #8]
}
 8006db6:	bf00      	nop
 8006db8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dc2:	bf00      	nop
 8006dc4:	51eb851f 	.word	0x51eb851f

08006dc8 <__libc_init_array>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	4d0d      	ldr	r5, [pc, #52]	; (8006e00 <__libc_init_array+0x38>)
 8006dcc:	4c0d      	ldr	r4, [pc, #52]	; (8006e04 <__libc_init_array+0x3c>)
 8006dce:	1b64      	subs	r4, r4, r5
 8006dd0:	10a4      	asrs	r4, r4, #2
 8006dd2:	2600      	movs	r6, #0
 8006dd4:	42a6      	cmp	r6, r4
 8006dd6:	d109      	bne.n	8006dec <__libc_init_array+0x24>
 8006dd8:	4d0b      	ldr	r5, [pc, #44]	; (8006e08 <__libc_init_array+0x40>)
 8006dda:	4c0c      	ldr	r4, [pc, #48]	; (8006e0c <__libc_init_array+0x44>)
 8006ddc:	f000 f820 	bl	8006e20 <_init>
 8006de0:	1b64      	subs	r4, r4, r5
 8006de2:	10a4      	asrs	r4, r4, #2
 8006de4:	2600      	movs	r6, #0
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	d105      	bne.n	8006df6 <__libc_init_array+0x2e>
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
 8006dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df0:	4798      	blx	r3
 8006df2:	3601      	adds	r6, #1
 8006df4:	e7ee      	b.n	8006dd4 <__libc_init_array+0xc>
 8006df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dfa:	4798      	blx	r3
 8006dfc:	3601      	adds	r6, #1
 8006dfe:	e7f2      	b.n	8006de6 <__libc_init_array+0x1e>
 8006e00:	08006e58 	.word	0x08006e58
 8006e04:	08006e58 	.word	0x08006e58
 8006e08:	08006e58 	.word	0x08006e58
 8006e0c:	08006e5c 	.word	0x08006e5c

08006e10 <memset>:
 8006e10:	4402      	add	r2, r0
 8006e12:	4603      	mov	r3, r0
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d100      	bne.n	8006e1a <memset+0xa>
 8006e18:	4770      	bx	lr
 8006e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1e:	e7f9      	b.n	8006e14 <memset+0x4>

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
