
i2c_sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004010  08004010  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004018  08004018  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000158  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e41  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000156b  00000000  00000000  00027e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  00029b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002008c  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000981d  00000000  00000000  0004a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f3c  00000000  00000000  00053a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001159ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dfc  00000000  00000000  00115a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fe0 	.word	0x08003fe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fe0 	.word	0x08003fe0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <BH1750_Init+0x34>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000d66:	f000 f813 	bl	8000d90 <BH1750_Reset>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d107      	bne.n	8000d80 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000d70:	2045      	movs	r0, #69	; 0x45
 8000d72:	f000 f85d 	bl	8000e30 <BH1750_SetMtreg>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <BH1750_Init+0x28>
			return BH1750_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e000      	b.n	8000d82 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000028 	.word	0x20000028

08000d90 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000d96:	2307      	movs	r3, #7
 8000d98:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <BH1750_Reset+0x30>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	1dfa      	adds	r2, r7, #7
 8000da0:	230a      	movs	r3, #10
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	2301      	movs	r3, #1
 8000da6:	2146      	movs	r1, #70	; 0x46
 8000da8:	f001 f9ba 	bl	8002120 <HAL_I2C_Master_Transmit>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <BH1750_Reset+0x26>
		return BH1750_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000028 	.word	0x20000028

08000dc4 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(I2C_HandleTypeDef *hi2c, bh1750_mode Mode)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	bh1750_i2c = hi2c;
 8000dd0:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <BH1750_SetMode+0x64>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <BH1750_SetMode+0x2a>
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <BH1750_SetMode+0x2a>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e018      	b.n	8000e20 <BH1750_SetMode+0x5c>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <BH1750_SetMode+0x38>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e011      	b.n	8000e20 <BH1750_SetMode+0x5c>

	Bh1750_Mode = Mode;
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <BH1750_SetMode+0x68>)
 8000e00:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <BH1750_SetMode+0x64>)
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	1cfa      	adds	r2, r7, #3
 8000e08:	230a      	movs	r3, #10
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	2146      	movs	r1, #70	; 0x46
 8000e10:	f001 f986 	bl	8002120 <HAL_I2C_Master_Transmit>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <BH1750_SetMode+0x5a>
		return BH1750_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <BH1750_SetMode+0x5c>

	return BH1750_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000028 	.word	0x20000028
 8000e2c:	2000002c 	.word	0x2000002c

08000e30 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b1e      	cmp	r3, #30
 8000e3e:	d902      	bls.n	8000e46 <BH1750_SetMtreg+0x16>
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2bff      	cmp	r3, #255	; 0xff
 8000e44:	d101      	bne.n	8000e4a <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e037      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <BH1750_SetMtreg+0x94>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <BH1750_SetMtreg+0x98>)
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	f107 020c 	add.w	r2, r7, #12
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2146      	movs	r1, #70	; 0x46
 8000e82:	f001 f94d 	bl	8002120 <HAL_I2C_Master_Transmit>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e012      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <BH1750_SetMtreg+0x98>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	2146      	movs	r1, #70	; 0x46
 8000ea6:	f001 f93b 	bl	8002120 <HAL_I2C_Master_Transmit>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000002d 	.word	0x2000002d
 8000ec8:	20000028 	.word	0x20000028

08000ecc <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(I2C_HandleTypeDef *hi2c, float *Result)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	bh1750_i2c = hi2c;
 8000ed6:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <BH1750_ReadLight+0xa8>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <BH1750_ReadLight+0xa8>)
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f107 0208 	add.w	r2, r7, #8
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2302      	movs	r3, #2
 8000eea:	2146      	movs	r1, #70	; 0x46
 8000eec:	f001 fa16 	bl	800231c <HAL_I2C_Master_Receive>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d138      	bne.n	8000f68 <BH1750_ReadLight+0x9c>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8000ef6:	7a3b      	ldrb	r3, [r7, #8]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	7a7a      	ldrb	r2, [r7, #9]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f06:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <BH1750_ReadLight+0xac>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b45      	cmp	r3, #69	; 0x45
 8000f10:	d00f      	beq.n	8000f32 <BH1750_ReadLight+0x66>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <BH1750_ReadLight+0xac>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1e:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f7c <BH1750_ReadLight+0xb0>
 8000f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2e:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <BH1750_ReadLight+0xb4>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b21      	cmp	r3, #33	; 0x21
 8000f38:	d003      	beq.n	8000f42 <BH1750_ReadLight+0x76>
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <BH1750_ReadLight+0xb4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d107      	bne.n	8000f52 <BH1750_ReadLight+0x86>
		{
			result /= 2.0;
 8000f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4e:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8000f52:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f56:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f84 <BH1750_ReadLight+0xb8>
 8000f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e000      	b.n	8000f6a <BH1750_ReadLight+0x9e>
	}
	return BH1750_ERROR;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000028 	.word	0x20000028
 8000f78:	2000002d 	.word	0x2000002d
 8000f7c:	428a0000 	.word	0x428a0000
 8000f80:	2000002c 	.word	0x2000002c
 8000f84:	3f99999a 	.word	0x3f99999a

08000f88 <Kalibrasyon_Degeri_Okuma>:
long Temp = 0;



void Kalibrasyon_Degeri_Okuma (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa0:	23aa      	movs	r3, #170	; 0xaa
 8000fa2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa4:	8afa      	ldrh	r2, [r7, #22]
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2316      	movs	r3, #22
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	21ee      	movs	r1, #238	; 0xee
 8000fb8:	4836      	ldr	r0, [pc, #216]	; (8001094 <Kalibrasyon_Degeri_Okuma+0x10c>)
 8000fba:	f001 fccf 	bl	800295c <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fbe:	783b      	ldrb	r3, [r7, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <Kalibrasyon_Degeri_Okuma+0x110>)
 8000fce:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd0:	78bb      	ldrb	r3, [r7, #2]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <Kalibrasyon_Degeri_Okuma+0x114>)
 8000fe0:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe2:	793b      	ldrb	r3, [r7, #4]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	797b      	ldrb	r3, [r7, #5]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <Kalibrasyon_Degeri_Okuma+0x118>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <Kalibrasyon_Degeri_Okuma+0x11c>)
 8001006:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7a7b      	ldrb	r3, [r7, #9]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <Kalibrasyon_Degeri_Okuma+0x120>)
 800101a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <Kalibrasyon_Degeri_Okuma+0x124>)
 800102e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <Kalibrasyon_Degeri_Okuma+0x128>)
 8001040:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <Kalibrasyon_Degeri_Okuma+0x12c>)
 8001052:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001054:	7c3b      	ldrb	r3, [r7, #16]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7c7b      	ldrb	r3, [r7, #17]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <Kalibrasyon_Degeri_Okuma+0x130>)
 8001064:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001066:	7cbb      	ldrb	r3, [r7, #18]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7cfb      	ldrb	r3, [r7, #19]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <Kalibrasyon_Degeri_Okuma+0x134>)
 8001076:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001078:	7d3b      	ldrb	r3, [r7, #20]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7d7b      	ldrb	r3, [r7, #21]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <Kalibrasyon_Degeri_Okuma+0x138>)
 8001088:	801a      	strh	r2, [r3, #0]

}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000100 	.word	0x20000100
 8001098:	2000002e 	.word	0x2000002e
 800109c:	20000030 	.word	0x20000030
 80010a0:	20000032 	.word	0x20000032
 80010a4:	20000034 	.word	0x20000034
 80010a8:	20000036 	.word	0x20000036
 80010ac:	20000038 	.word	0x20000038
 80010b0:	2000003a 	.word	0x2000003a
 80010b4:	2000003c 	.word	0x2000003c
 80010b8:	2000003e 	.word	0x2000003e
 80010bc:	20000040 	.word	0x20000040
 80010c0:	20000042 	.word	0x20000042

080010c4 <Ham_Sicaklik_Okuma>:


uint16_t Ham_Sicaklik_Okuma (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010ca:	232e      	movs	r3, #46	; 0x2e
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010ce:	2300      	movs	r3, #0
 80010d0:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 100);
 80010d2:	2364      	movs	r3, #100	; 0x64
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	22f4      	movs	r2, #244	; 0xf4
 80010e2:	21ee      	movs	r1, #238	; 0xee
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <Ham_Sicaklik_Okuma+0x5c>)
 80010e6:	f001 fb3f 	bl	8002768 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // 4.5 ms bekle
 80010ea:	2005      	movs	r0, #5
 80010ec:	f000 fc14 	bl	8001918 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 100);
 80010f0:	2364      	movs	r3, #100	; 0x64
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	22f6      	movs	r2, #246	; 0xf6
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Ham_Sicaklik_Okuma+0x5c>)
 8001104:	f001 fc2a 	bl	800295c <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000100 	.word	0x20000100

08001124 <BMP180_Sicaklik_Okuma>:

float BMP180_Sicaklik_Okuma (void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	af00      	add	r7, sp, #0
	UT = Ham_Sicaklik_Okuma();
 8001128:	f7ff ffcc 	bl	80010c4 <Ham_Sicaklik_Okuma>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <BMP180_Sicaklik_Okuma+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BMP180_Sicaklik_Okuma+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <BMP180_Sicaklik_Okuma+0x10c>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f994 	bl	800046c <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <BMP180_Sicaklik_Okuma+0x110>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f98d 	bl	800046c <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <BMP180_Sicaklik_Okuma+0x114>)
 8001158:	f7ff fb1c 	bl	8000794 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f9ec 	bl	8000540 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fbf8 	bl	8000964 <__aeabi_d2iz>
 8001174:	4603      	mov	r3, r0
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 8001178:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <BMP180_Sicaklik_Okuma+0x11c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f973 	bl	800046c <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_Sicaklik_Okuma+0x120>)
 800118c:	f7ff f9d8 	bl	8000540 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	461d      	mov	r5, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <BMP180_Sicaklik_Okuma+0x124>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f960 	bl	800046c <__aeabi_i2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff faee 	bl	8000794 <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fbd0 	bl	8000964 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <BMP180_Sicaklik_Okuma+0x128>)
 80011c8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <BMP180_Sicaklik_Okuma+0x118>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <BMP180_Sicaklik_Okuma+0x128>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <BMP180_Sicaklik_Okuma+0x12c>)
 80011d6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <BMP180_Sicaklik_Okuma+0x12c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f944 	bl	800046c <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <BMP180_Sicaklik_Okuma+0x130>)
 80011ea:	f7ff fad3 	bl	8000794 <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fbb5 	bl	8000964 <__aeabi_d2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <BMP180_Sicaklik_Okuma+0x134>)
 80011fe:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BMP180_Sicaklik_Okuma+0x134>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f931 	bl	800046c <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BMP180_Sicaklik_Okuma+0x138>)
 8001210:	f7ff fac0 	bl	8000794 <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fbca 	bl	80009b4 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	20000044 	.word	0x20000044
 8001230:	20000038 	.word	0x20000038
 8001234:	20000036 	.word	0x20000036
 8001238:	40e00000 	.word	0x40e00000
 800123c:	20000048 	.word	0x20000048
 8001240:	20000040 	.word	0x20000040
 8001244:	40a00000 	.word	0x40a00000
 8001248:	20000042 	.word	0x20000042
 800124c:	2000004c 	.word	0x2000004c
 8001250:	20000050 	.word	0x20000050
 8001254:	40300000 	.word	0x40300000
 8001258:	20000054 	.word	0x20000054
 800125c:	40240000 	.word	0x40240000

08001260 <BMP180_Baslat>:


void BMP180_Baslat (void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	Kalibrasyon_Degeri_Okuma();
 8001264:	f7ff fe90 	bl	8000f88 <Kalibrasyon_Degeri_Okuma>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001270:	f000 fae0 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f83e 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f930 	bl	80014dc <MX_GPIO_Init>
  MX_I2C1_Init();
 800127c:	f000 f8a4 	bl	80013c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001280:	f000 f8d0 	bl	8001424 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001284:	f000 f8fc 	bl	8001480 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BH1750_Init(&hi2c1);
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <main+0x70>)
 800128a:	f7ff fd65 	bl	8000d58 <BH1750_Init>
  BH1750_SetMode(&hi2c1, CONTINUOUS_HIGH_RES_MODE_2);
 800128e:	2111      	movs	r1, #17
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <main+0x70>)
 8001292:	f7ff fd97 	bl	8000dc4 <BH1750_SetMode>
  BH1750_Init(&hi2c2);
 8001296:	4812      	ldr	r0, [pc, #72]	; (80012e0 <main+0x74>)
 8001298:	f7ff fd5e 	bl	8000d58 <BH1750_Init>
  BH1750_SetMode(&hi2c2, CONTINUOUS_HIGH_RES_MODE_2);
 800129c:	2111      	movs	r1, #17
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <main+0x74>)
 80012a0:	f7ff fd90 	bl	8000dc4 <BH1750_SetMode>
  BMP180_Baslat();
 80012a4:	f7ff ffdc 	bl	8001260 <BMP180_Baslat>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  BH1750_ReadLight(&hi2c1, &BH1750_lux1);
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <main+0x78>)
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <main+0x70>)
 80012ac:	f7ff fe0e 	bl	8000ecc <BH1750_ReadLight>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 );
 80012b0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <main+0x7c>)
 80012b6:	f000 fdd5 	bl	8001e64 <HAL_GPIO_TogglePin>
	  BH1750_ReadLight(&hi2c2, &BH1750_lux2);
 80012ba:	490c      	ldr	r1, [pc, #48]	; (80012ec <main+0x80>)
 80012bc:	4808      	ldr	r0, [pc, #32]	; (80012e0 <main+0x74>)
 80012be:	f7ff fe05 	bl	8000ecc <BH1750_ReadLight>
	  sicaklik = BMP180_Sicaklik_Okuma();
 80012c2:	f7ff ff2f 	bl	8001124 <BMP180_Sicaklik_Okuma>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <main+0x84>)
 80012cc:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(300);
 80012d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012d4:	f000 fb20 	bl	8001918 <HAL_Delay>
	  BH1750_ReadLight(&hi2c1, &BH1750_lux1);
 80012d8:	e7e6      	b.n	80012a8 <main+0x3c>
 80012da:	bf00      	nop
 80012dc:	20000058 	.word	0x20000058
 80012e0:	200000ac 	.word	0x200000ac
 80012e4:	20000154 	.word	0x20000154
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	20000158 	.word	0x20000158
 80012f0:	2000015c 	.word	0x2000015c

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fe64 	bl	8003fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <SystemClock_Config+0xd0>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	2301      	movs	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	2310      	movs	r3, #16
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001364:	2308      	movs	r3, #8
 8001366:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001368:	23a8      	movs	r3, #168	; 0xa8
 800136a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001370:	2304      	movs	r3, #4
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f002 f9c1 	bl	8003700 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001384:	f000 f8ee 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001394:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001398:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2105      	movs	r1, #5
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fc22 	bl	8003bf0 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b2:	f000 f8d7 	bl	8001564 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <MX_I2C1_Init+0x54>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_I2C1_Init+0x50>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_I2C1_Init+0x58>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_I2C1_Init+0x50>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_I2C1_Init+0x50>)
 8001406:	f000 fd47 	bl	8001e98 <HAL_I2C_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001410:	f000 f8a8 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000058 	.word	0x20000058
 800141c:	40005400 	.word	0x40005400
 8001420:	000186a0 	.word	0x000186a0

08001424 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <MX_I2C2_Init+0x50>)
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <MX_I2C2_Init+0x54>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_I2C2_Init+0x50>)
 8001430:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_I2C2_Init+0x58>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_I2C2_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_I2C2_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C2_Init+0x50>)
 8001442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001446:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001448:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <MX_I2C2_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_I2C2_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_I2C2_Init+0x50>)
 8001462:	f000 fd19 	bl	8001e98 <HAL_I2C_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800146c:	f000 f87a 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000ac 	.word	0x200000ac
 8001478:	40005800 	.word	0x40005800
 800147c:	000186a0 	.word	0x000186a0

08001480 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C3_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C3_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C3_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C3_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014be:	f000 fceb 	bl	8001e98 <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 f84c 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000100 	.word	0x20000100
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_GPIO_Init+0x84>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <MX_GPIO_Init+0x84>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_GPIO_Init+0x84>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_GPIO_Init+0x84>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a16      	ldr	r2, [pc, #88]	; (8001560 <MX_GPIO_Init+0x84>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_GPIO_Init+0x84>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_GPIO_Init+0x84>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <MX_GPIO_Init+0x84>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_GPIO_Init+0x84>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_GPIO_Init+0x84>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <MX_GPIO_Init+0x84>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_GPIO_Init+0x84>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a5b      	ldr	r2, [pc, #364]	; (800174c <HAL_I2C_MspInit+0x18c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a59      	ldr	r2, [pc, #356]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b57      	ldr	r3, [pc, #348]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	484e      	ldr	r0, [pc, #312]	; (8001754 <HAL_I2C_MspInit+0x194>)
 800161a:	f000 fa87 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800163a:	e083      	b.n	8001744 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a45      	ldr	r2, [pc, #276]	; (8001758 <HAL_I2C_MspInit+0x198>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12d      	bne.n	80016a2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <HAL_I2C_MspInit+0x190>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a40      	ldr	r2, [pc, #256]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001662:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001668:	2312      	movs	r3, #18
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001674:	2304      	movs	r3, #4
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4835      	ldr	r0, [pc, #212]	; (8001754 <HAL_I2C_MspInit+0x194>)
 8001680:	f000 fa54 	bl	8001b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_I2C_MspInit+0x190>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a30      	ldr	r2, [pc, #192]	; (8001750 <HAL_I2C_MspInit+0x190>)
 800168e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001692:	6413      	str	r3, [r2, #64]	; 0x40
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
}
 80016a0:	e050      	b.n	8001744 <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a2d      	ldr	r2, [pc, #180]	; (800175c <HAL_I2C_MspInit+0x19c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d14b      	bne.n	8001744 <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a1f      	ldr	r2, [pc, #124]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <HAL_I2C_MspInit+0x190>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f6:	2304      	movs	r3, #4
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4817      	ldr	r0, [pc, #92]	; (8001760 <HAL_I2C_MspInit+0x1a0>)
 8001702:	f000 fa13 	bl	8001b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170c:	2312      	movs	r3, #18
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001718:	2304      	movs	r3, #4
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4810      	ldr	r0, [pc, #64]	; (8001764 <HAL_I2C_MspInit+0x1a4>)
 8001724:	f000 fa02 	bl	8001b2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x190>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_I2C_MspInit+0x190>)
 8001732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_I2C_MspInit+0x190>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
}
 8001744:	bf00      	nop
 8001746:	3738      	adds	r7, #56	; 0x38
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400
 8001758:	40005800 	.word	0x40005800
 800175c:	40005c00 	.word	0x40005c00
 8001760:	40020800 	.word	0x40020800
 8001764:	40020000 	.word	0x40020000

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b4:	f000 f890 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	; (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f002 fbbb 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff fd2b 	bl	800126c <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001824:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8001828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800182c:	20000164 	.word	0x20000164

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f931 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fe82 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f93b 	bl	8001b12 <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f911 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000160 	.word	0x20000160

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000160 	.word	0x20000160

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff47 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff5c 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffb0 	bl	8001a80 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e16b      	b.n	8001e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 815a 	bne.w	8001e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80b4 	beq.w	8001e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <HAL_GPIO_Init+0x310>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_GPIO_Init+0x314>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_GPIO_Init+0x318>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x31c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x320>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_GPIO_Init+0x324>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x328>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x32c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_GPIO_Init+0x330>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x20a>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e00e      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x228>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	; (8001e3c <HAL_GPIO_Init+0x310>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_GPIO_Init+0x334>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae90 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40021c00 	.word	0x40021c00
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43d9      	mvns	r1, r3
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	400b      	ands	r3, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e12b      	b.n	8002102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d106      	bne.n	8001ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fb7e 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2224      	movs	r2, #36	; 0x24
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001efc:	f002 f830 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8001f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a81      	ldr	r2, [pc, #516]	; (800210c <HAL_I2C_Init+0x274>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d807      	bhi.n	8001f1c <HAL_I2C_Init+0x84>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a80      	ldr	r2, [pc, #512]	; (8002110 <HAL_I2C_Init+0x278>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e006      	b.n	8001f2a <HAL_I2C_Init+0x92>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a7d      	ldr	r2, [pc, #500]	; (8002114 <HAL_I2C_Init+0x27c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	bf94      	ite	ls
 8001f24:	2301      	movls	r3, #1
 8001f26:	2300      	movhi	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0e7      	b.n	8002102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4a78      	ldr	r2, [pc, #480]	; (8002118 <HAL_I2C_Init+0x280>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_I2C_Init+0x274>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d802      	bhi.n	8001f6c <HAL_I2C_Init+0xd4>
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	e009      	b.n	8001f80 <HAL_I2C_Init+0xe8>
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a69      	ldr	r2, [pc, #420]	; (800211c <HAL_I2C_Init+0x284>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	099b      	lsrs	r3, r3, #6
 8001f7e:	3301      	adds	r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	495c      	ldr	r1, [pc, #368]	; (800210c <HAL_I2C_Init+0x274>)
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	d819      	bhi.n	8001fd4 <HAL_I2C_Init+0x13c>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e59      	subs	r1, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fae:	1c59      	adds	r1, r3, #1
 8001fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_I2C_Init+0x138>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1e59      	subs	r1, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fce:	e051      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e04f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d111      	bne.n	8002000 <HAL_I2C_Init+0x168>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	1e58      	subs	r0, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	e012      	b.n	8002026 <HAL_I2C_Init+0x18e>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x196>
 800202a:	2301      	movs	r3, #1
 800202c:	e022      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10e      	bne.n	8002054 <HAL_I2C_Init+0x1bc>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e58      	subs	r0, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	440b      	add	r3, r1
 8002044:	fbb0 f3f3 	udiv	r3, r0, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	e00f      	b.n	8002074 <HAL_I2C_Init+0x1dc>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6809      	ldr	r1, [r1, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6911      	ldr	r1, [r2, #16]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68d2      	ldr	r2, [r2, #12]
 80020ae:	4311      	orrs	r1, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	000186a0 	.word	0x000186a0
 8002110:	001e847f 	.word	0x001e847f
 8002114:	003d08ff 	.word	0x003d08ff
 8002118:	431bde83 	.word	0x431bde83
 800211c:	10624dd3 	.word	0x10624dd3

08002120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	461a      	mov	r2, r3
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
 8002130:	4613      	mov	r3, r2
 8002132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fbe4 	bl	8001900 <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	f040 80e0 	bne.w	8002308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	4970      	ldr	r1, [pc, #448]	; (8002314 <HAL_I2C_Master_Transmit+0x1f4>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f001 f8f6 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	e0d3      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x50>
 800216c:	2302      	movs	r3, #2
 800216e:	e0cc      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d007      	beq.n	8002196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2221      	movs	r2, #33	; 0x21
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2210      	movs	r2, #16
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	893a      	ldrh	r2, [r7, #8]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_I2C_Master_Transmit+0x1f8>)
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021d8:	8979      	ldrh	r1, [r7, #10]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fde2 	bl	8002da8 <I2C_MasterRequestWrite>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e08d      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002204:	e066      	b.n	80022d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f001 f970 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b04      	cmp	r3, #4
 800221c:	d107      	bne.n	800222e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e06b      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b04      	cmp	r3, #4
 800226e:	d11b      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0x188>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d017      	beq.n	80022a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f001 f960 	bl	8003572 <I2C_WaitOnBTFFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e01a      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d194      	bne.n	8002206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e000      	b.n	800230a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002308:	2302      	movs	r3, #2
  }
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	00100002 	.word	0x00100002
 8002318:	ffff0000 	.word	0xffff0000

0800231c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	460b      	mov	r3, r1
 800232a:	817b      	strh	r3, [r7, #10]
 800232c:	4613      	mov	r3, r2
 800232e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff fae6 	bl	8001900 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	f040 820b 	bne.w	800275a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2319      	movs	r3, #25
 800234a:	2201      	movs	r2, #1
 800234c:	497c      	ldr	r1, [pc, #496]	; (8002540 <HAL_I2C_Master_Receive+0x224>)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fff8 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800235a:	2302      	movs	r3, #2
 800235c:	e1fe      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_I2C_Master_Receive+0x50>
 8002368:	2302      	movs	r3, #2
 800236a:	e1f7      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d007      	beq.n	8002392 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0201 	orr.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2210      	movs	r2, #16
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	893a      	ldrh	r2, [r7, #8]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a5c      	ldr	r2, [pc, #368]	; (8002544 <HAL_I2C_Master_Receive+0x228>)
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023d4:	8979      	ldrh	r1, [r7, #10]
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fd66 	bl	8002eac <I2C_MasterRequestRead>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1b8      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d113      	bne.n	800241a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e18c      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	2b01      	cmp	r3, #1
 8002420:	d11b      	bne.n	800245a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e16c      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	2b02      	cmp	r3, #2
 8002460:	d11b      	bne.n	800249a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002470:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	e14c      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024c0:	e138      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	f200 80f1 	bhi.w	80026ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d123      	bne.n	800251c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f001 f88b 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e139      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a
 800251a:	e10b      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	d14e      	bne.n	80025c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	2200      	movs	r2, #0
 800252c:	4906      	ldr	r1, [pc, #24]	; (8002548 <HAL_I2C_Master_Receive+0x22c>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 ff08 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e10e      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
 800253e:	bf00      	nop
 8002540:	00100002 	.word	0x00100002
 8002544:	ffff0000 	.word	0xffff0000
 8002548:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025c0:	e0b8      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	4966      	ldr	r1, [pc, #408]	; (8002764 <HAL_I2C_Master_Receive+0x448>)
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 feb9 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0bf      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	2200      	movs	r2, #0
 8002626:	494f      	ldr	r1, [pc, #316]	; (8002764 <HAL_I2C_Master_Receive+0x448>)
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fe8b 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e091      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ac:	e042      	b.n	8002734 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 ff9e 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e04c      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d118      	bne.n	8002734 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f aec2 	bne.w	80024c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	00010004 	.word	0x00010004

08002768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002782:	f7ff f8bd 	bl	8001900 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 80d9 	bne.w	8002948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2319      	movs	r3, #25
 800279c:	2201      	movs	r2, #1
 800279e:	496d      	ldr	r1, [pc, #436]	; (8002954 <HAL_I2C_Mem_Write+0x1ec>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fdcf 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0cc      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Mem_Write+0x56>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0c5      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d007      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	; 0x21
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <HAL_I2C_Mem_Write+0x1f0>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002826:	88f8      	ldrh	r0, [r7, #6]
 8002828:	893a      	ldrh	r2, [r7, #8]
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4603      	mov	r3, r0
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fc06 	bl	8003048 <I2C_RequestMemoryWrite>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d052      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e081      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fe50 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d11b      	bne.n	80028e8 <HAL_I2C_Mem_Write+0x180>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1aa      	bne.n	8002846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fe3c 	bl	8003572 <I2C_WaitOnBTFFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b04      	cmp	r3, #4
 8002906:	d107      	bne.n	8002918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e016      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	00100002 	.word	0x00100002
 8002958:	ffff0000 	.word	0xffff0000

0800295c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002976:	f7fe ffc3 	bl	8001900 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	f040 8208 	bne.w	8002d9a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2319      	movs	r3, #25
 8002990:	2201      	movs	r2, #1
 8002992:	497b      	ldr	r1, [pc, #492]	; (8002b80 <HAL_I2C_Mem_Read+0x224>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fcd5 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
 80029a2:	e1fb      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x56>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e1f4      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d007      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2222      	movs	r2, #34	; 0x22
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a5b      	ldr	r2, [pc, #364]	; (8002b84 <HAL_I2C_Mem_Read+0x228>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1a:	88f8      	ldrh	r0, [r7, #6]
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	4603      	mov	r3, r0
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fba2 	bl	8003174 <I2C_RequestMemoryRead>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1b0      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	623b      	str	r3, [r7, #32]
 8002a56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e184      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d11b      	bne.n	8002aaa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e164      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d11b      	bne.n	8002aea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	e144      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b00:	e138      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	f200 80f1 	bhi.w	8002cee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d123      	bne.n	8002b5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fd6b 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e139      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b5a:	e10b      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d14e      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4906      	ldr	r1, [pc, #24]	; (8002b88 <HAL_I2C_Mem_Read+0x22c>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fbe8 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e10e      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
 8002b7e:	bf00      	nop
 8002b80:	00100002 	.word	0x00100002
 8002b84:	ffff0000 	.word	0xffff0000
 8002b88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c00:	e0b8      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4966      	ldr	r1, [pc, #408]	; (8002da4 <HAL_I2C_Mem_Read+0x448>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fb99 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0bf      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2200      	movs	r2, #0
 8002c66:	494f      	ldr	r1, [pc, #316]	; (8002da4 <HAL_I2C_Mem_Read+0x448>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fb6b 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e091      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cec:	e042      	b.n	8002d74 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fc7e 	bl	80035f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e04c      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d118      	bne.n	8002d74 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f aec2 	bne.w	8002b02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	00010004 	.word	0x00010004

08002da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d006      	beq.n	8002dd2 <I2C_MasterRequestWrite+0x2a>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d003      	beq.n	8002dd2 <I2C_MasterRequestWrite+0x2a>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dd0:	d108      	bne.n	8002de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e00b      	b.n	8002dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	2b12      	cmp	r3, #18
 8002dea:	d107      	bne.n	8002dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fa9b 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00d      	beq.n	8002e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e22:	d103      	bne.n	8002e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e035      	b.n	8002e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e38:	d108      	bne.n	8002e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e3a:	897b      	ldrh	r3, [r7, #10]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	e01b      	b.n	8002e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e4c:	897b      	ldrh	r3, [r7, #10]
 8002e4e:	11db      	asrs	r3, r3, #7
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0306 	and.w	r3, r3, #6
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f063 030f 	orn	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <I2C_MasterRequestWrite+0xfc>)
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fac1 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e010      	b.n	8002e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <I2C_MasterRequestWrite+0x100>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fab1 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	00010008 	.word	0x00010008
 8002ea8:	00010002 	.word	0x00010002

08002eac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d006      	beq.n	8002ee6 <I2C_MasterRequestRead+0x3a>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d003      	beq.n	8002ee6 <I2C_MasterRequestRead+0x3a>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee4:	d108      	bne.n	8002ef8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e00b      	b.n	8002f10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	2b11      	cmp	r3, #17
 8002efe:	d107      	bne.n	8002f10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fa11 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f36:	d103      	bne.n	8002f40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e079      	b.n	8003038 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4c:	d108      	bne.n	8002f60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f4e:	897b      	ldrh	r3, [r7, #10]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	e05f      	b.n	8003020 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f60:	897b      	ldrh	r3, [r7, #10]
 8002f62:	11db      	asrs	r3, r3, #7
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 0306 	and.w	r3, r3, #6
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f063 030f 	orn	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4930      	ldr	r1, [pc, #192]	; (8003040 <I2C_MasterRequestRead+0x194>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fa37 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e054      	b.n	8003038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4929      	ldr	r1, [pc, #164]	; (8003044 <I2C_MasterRequestRead+0x198>)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fa27 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e044      	b.n	8003038 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f9af 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffa:	d103      	bne.n	8003004 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e017      	b.n	8003038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003008:	897b      	ldrh	r3, [r7, #10]
 800300a:	11db      	asrs	r3, r3, #7
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f003 0306 	and.w	r3, r3, #6
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f063 030e 	orn	r3, r3, #14
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4907      	ldr	r1, [pc, #28]	; (8003044 <I2C_MasterRequestRead+0x198>)
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f9e3 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	00010008 	.word	0x00010008
 8003044:	00010002 	.word	0x00010002

08003048 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	817b      	strh	r3, [r7, #10]
 800305a:	460b      	mov	r3, r1
 800305c:	813b      	strh	r3, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	2200      	movs	r2, #0
 800307a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f960 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d103      	bne.n	80030a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e05f      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	6a3a      	ldr	r2, [r7, #32]
 80030ba:	492d      	ldr	r1, [pc, #180]	; (8003170 <I2C_RequestMemoryWrite+0x128>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f998 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e04c      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	6a39      	ldr	r1, [r7, #32]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fa02 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00d      	beq.n	800310e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d107      	bne.n	800310a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e02b      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d105      	bne.n	8003120 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]
 800311e:	e021      	b.n	8003164 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003120:	893b      	ldrh	r3, [r7, #8]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	b29b      	uxth	r3, r3
 8003126:	b2da      	uxtb	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f9dc 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00d      	beq.n	800315a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2b04      	cmp	r3, #4
 8003144:	d107      	bne.n	8003156 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e005      	b.n	8003166 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315a:	893b      	ldrh	r3, [r7, #8]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	00010002 	.word	0x00010002

08003174 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	817b      	strh	r3, [r7, #10]
 8003186:	460b      	mov	r3, r1
 8003188:	813b      	strh	r3, [r7, #8]
 800318a:	4613      	mov	r3, r2
 800318c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f8c2 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d103      	bne.n	80031de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0aa      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	4952      	ldr	r1, [pc, #328]	; (8003340 <I2C_RequestMemoryRead+0x1cc>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f8fa 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e097      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f964 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b04      	cmp	r3, #4
 8003234:	d107      	bne.n	8003246 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e076      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003250:	893b      	ldrh	r3, [r7, #8]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	e021      	b.n	80032a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	b29b      	uxth	r3, r3
 8003262:	b2da      	uxtb	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f93e 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b04      	cmp	r3, #4
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003290:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e050      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003296:	893b      	ldrh	r3, [r7, #8]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	6a39      	ldr	r1, [r7, #32]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f923 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e035      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f82b 	bl	8003344 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d103      	bne.n	800330c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003310:	897b      	ldrh	r3, [r7, #10]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	6a3a      	ldr	r2, [r7, #32]
 8003324:	4906      	ldr	r1, [pc, #24]	; (8003340 <I2C_RequestMemoryRead+0x1cc>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f863 	bl	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010002 	.word	0x00010002

08003344 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003354:	e025      	b.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe facf 	bl	8001900 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e023      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10d      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	e00c      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d0b6      	beq.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003400:	e051      	b.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d123      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e046      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d021      	beq.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fa4d 	bl	8001900 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d116      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e020      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e00b      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d18d      	bne.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	e02d      	b.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8ce 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e02d      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d021      	beq.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7fe f9f3 	bl	8001900 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d116      	bne.n	800355a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b80      	cmp	r3, #128	; 0x80
 8003566:	d1ca      	bne.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800357e:	e02d      	b.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f88d 	bl	80036a0 <I2C_IsAcknowledgeFailed>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e02d      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d021      	beq.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003598:	f7fe f9b2 	bl	8001900 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d302      	bcc.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d1ca      	bne.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003600:	e042      	b.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d119      	bne.n	8003644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0210 	mvn.w	r2, #16
 8003618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e029      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003644:	f7fe f95c 	bl	8001900 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d302      	bcc.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d1b5      	bne.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d11b      	bne.n	80036f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e267      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d075      	beq.n	800380a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b04      	cmp	r3, #4
 8003728:	d00c      	beq.n	8003744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372a:	4b85      	ldr	r3, [pc, #532]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003732:	2b08      	cmp	r3, #8
 8003734:	d112      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b82      	ldr	r3, [pc, #520]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003742:	d10b      	bne.n	800375c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	4b7e      	ldr	r3, [pc, #504]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05b      	beq.n	8003808 <HAL_RCC_OscConfig+0x108>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d157      	bne.n	8003808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e242      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x74>
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a75      	ldr	r2, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e01d      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x98>
 800377e:	4b70      	ldr	r3, [pc, #448]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6f      	ldr	r2, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6c      	ldr	r2, [pc, #432]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0xb0>
 8003798:	4b69      	ldr	r3, [pc, #420]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a68      	ldr	r2, [pc, #416]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b66      	ldr	r3, [pc, #408]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a65      	ldr	r2, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d013      	beq.n	80037e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe f8a2 	bl	8001900 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe f89e 	bl	8001900 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e207      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0xc0>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe f88e 	bl	8001900 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fe f88a 	bl	8001900 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1f3      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	4b51      	ldr	r3, [pc, #324]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0xe8>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d063      	beq.n	80038de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003816:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d11c      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d116      	bne.n	8003868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	4b41      	ldr	r3, [pc, #260]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e1c7      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4937      	ldr	r1, [pc, #220]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	e03a      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003870:	4b34      	ldr	r3, [pc, #208]	; (8003944 <HAL_RCC_OscConfig+0x244>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe f843 	bl	8001900 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe f83f 	bl	8001900 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1a8      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4925      	ldr	r1, [pc, #148]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
 80038b0:	e015      	b.n	80038de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <HAL_RCC_OscConfig+0x244>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe f822 	bl	8001900 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fe f81e 	bl	8001900 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e187      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d036      	beq.n	8003958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_RCC_OscConfig+0x248>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe f802 	bl	8001900 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fd fffe 	bl	8001900 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e167      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x240>)
 8003914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x200>
 800391e:	e01b      	b.n	8003958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_OscConfig+0x248>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003926:	f7fd ffeb 	bl	8001900 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	e00e      	b.n	800394c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392e:	f7fd ffe7 	bl	8001900 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d907      	bls.n	800394c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e150      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
 8003940:	40023800 	.word	0x40023800
 8003944:	42470000 	.word	0x42470000
 8003948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ea      	bne.n	800392e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8097 	beq.w	8003a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	4b7d      	ldr	r3, [pc, #500]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a7c      	ldr	r2, [pc, #496]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b7a      	ldr	r3, [pc, #488]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b77      	ldr	r3, [pc, #476]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d118      	bne.n	80039d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a2:	4b74      	ldr	r3, [pc, #464]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a73      	ldr	r2, [pc, #460]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ae:	f7fd ffa7 	bl	8001900 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7fd ffa3 	bl	8001900 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e10c      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x474>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x2ea>
 80039dc:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a63      	ldr	r2, [pc, #396]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	e01c      	b.n	8003a24 <HAL_RCC_OscConfig+0x324>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x30c>
 80039f2:	4b5f      	ldr	r3, [pc, #380]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a5e      	ldr	r2, [pc, #376]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	4b5c      	ldr	r3, [pc, #368]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a5b      	ldr	r2, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCC_OscConfig+0x324>
 8003a0c:	4b58      	ldr	r3, [pc, #352]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	4a57      	ldr	r2, [pc, #348]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	6713      	str	r3, [r2, #112]	; 0x70
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fd ff68 	bl	8001900 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fd ff64 	bl	8001900 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0cb      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0ee      	beq.n	8003a34 <HAL_RCC_OscConfig+0x334>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a58:	f7fd ff52 	bl	8001900 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd ff4e 	bl	8001900 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0b5      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a76:	4b3e      	ldr	r3, [pc, #248]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ee      	bne.n	8003a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d105      	bne.n	8003a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a88:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a1 	beq.w	8003be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d05c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d141      	bne.n	8003b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd ff22 	bl	8001900 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd ff1e 	bl	8001900 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e087      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	491b      	ldr	r1, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fef7 	bl	8001900 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fd fef3 	bl	8001900 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e05c      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x416>
 8003b34:	e054      	b.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x478>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fee0 	bl	8001900 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd fedc 	bl	8001900 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e045      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_OscConfig+0x470>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x444>
 8003b62:	e03d      	b.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e038      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40007000 	.word	0x40007000
 8003b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x4ec>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d028      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d121      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d11a      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d111      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800

08003bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0cc      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d90c      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0b8      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a58      	ldr	r2, [pc, #352]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c5c:	4b53      	ldr	r3, [pc, #332]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c68:	4b50      	ldr	r3, [pc, #320]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	494d      	ldr	r1, [pc, #308]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d044      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e06f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e067      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 0203 	bic.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4934      	ldr	r1, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce0:	f7fd fe0e 	bl	8001900 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce8:	f7fd fe0a 	bl	8001900 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04f      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 020c 	and.w	r2, r3, #12
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1eb      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d10:	4b25      	ldr	r3, [pc, #148]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d20c      	bcs.n	8003d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b20      	ldr	r3, [pc, #128]	; (8003da8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e032      	b.n	8003d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4916      	ldr	r1, [pc, #88]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	490e      	ldr	r1, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d76:	f000 f821 	bl	8003dbc <HAL_RCC_GetSysClockFreq>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	490a      	ldr	r1, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	5ccb      	ldrb	r3, [r1, r3]
 8003d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8e:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd fd6e 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023c00 	.word	0x40023c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08003ff8 	.word	0x08003ff8
 8003db4:	20000000 	.word	0x20000000
 8003db8:	20000004 	.word	0x20000004

08003dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc0:	b090      	sub	sp, #64	; 0x40
 8003dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dcc:	2300      	movs	r3, #0
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x40>
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	f200 80a1 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d003      	beq.n	8003df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dee:	e09b      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003df4:	e09b      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dfa:	e098      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dfc:	4b4f      	ldr	r3, [pc, #316]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e06:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d028      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e24:	2100      	movs	r1, #0
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e28:	fb03 f201 	mul.w	r2, r3, r1
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	fb00 f303 	mul.w	r3, r0, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e36:	fba0 1202 	umull	r1, r2, r0, r2
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e42:	4413      	add	r3, r2
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e48:	2200      	movs	r2, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	61fa      	str	r2, [r7, #28]
 8003e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e56:	f7fc fdfd 	bl	8000a54 <__aeabi_uldivmod>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4613      	mov	r3, r2
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e62:	e053      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	617a      	str	r2, [r7, #20]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e76:	f04f 0b00 	mov.w	fp, #0
 8003e7a:	4652      	mov	r2, sl
 8003e7c:	465b      	mov	r3, fp
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8c:	0150      	lsls	r0, r2, #5
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	ebb2 080a 	subs.w	r8, r2, sl
 8003e96:	eb63 090b 	sbc.w	r9, r3, fp
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eae:	ebb2 0408 	subs.w	r4, r2, r8
 8003eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	00eb      	lsls	r3, r5, #3
 8003ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec4:	00e2      	lsls	r2, r4, #3
 8003ec6:	4614      	mov	r4, r2
 8003ec8:	461d      	mov	r5, r3
 8003eca:	eb14 030a 	adds.w	r3, r4, sl
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	eb45 030b 	adc.w	r3, r5, fp
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f00:	f7fc fda8 	bl	8000a54 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3740      	adds	r7, #64	; 0x40
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	017d7840 	.word	0x017d7840

08003f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a9b      	lsrs	r3, r3, #10
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08004008 	.word	0x08004008

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4d0d      	ldr	r5, [pc, #52]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8c:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f8e:	1b64      	subs	r4, r4, r5
 8003f90:	10a4      	asrs	r4, r4, #2
 8003f92:	2600      	movs	r6, #0
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	4d0b      	ldr	r5, [pc, #44]	; (8003fc8 <__libc_init_array+0x40>)
 8003f9a:	4c0c      	ldr	r4, [pc, #48]	; (8003fcc <__libc_init_array+0x44>)
 8003f9c:	f000 f820 	bl	8003fe0 <_init>
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	08004018 	.word	0x08004018
 8003fc4:	08004018 	.word	0x08004018
 8003fc8:	08004018 	.word	0x08004018
 8003fcc:	0800401c 	.word	0x0800401c

08003fd0 <memset>:
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
